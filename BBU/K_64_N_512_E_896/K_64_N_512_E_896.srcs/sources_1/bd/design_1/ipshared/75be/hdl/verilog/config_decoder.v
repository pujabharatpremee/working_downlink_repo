// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="config_decoder,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu21dr-ffvd1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=82,HLS_SYN_LUT=142,HLS_VERSION=2018_3}" *)

module config_decoder (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dec_ctrl_V_V_TDATA,
        dec_ctrl_V_V_TVALID,
        dec_ctrl_V_V_TREADY,
        dec_din_words_TDATA,
        dec_din_words_TVALID,
        dec_din_words_TREADY,
        dec_din_words_TLAST,
        dec_dout_words_TDATA,
        dec_dout_words_TVALID,
        dec_dout_words_TREADY,
        dec_dout_words_TLAST
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    ap_const_lv32_0 = 32'd0;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] dec_ctrl_V_V_TDATA;
output   dec_ctrl_V_V_TVALID;
input   dec_ctrl_V_V_TREADY;
output  [7:0] dec_din_words_TDATA;
output   dec_din_words_TVALID;
input   dec_din_words_TREADY;
output  [0:0] dec_din_words_TLAST;
output  [7:0] dec_dout_words_TDATA;
output   dec_dout_words_TVALID;
input   dec_dout_words_TREADY;
output  [0:0] dec_dout_words_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] dec_ctrl_V_V_1_data_out;
reg    dec_ctrl_V_V_1_vld_in;
wire    dec_ctrl_V_V_1_vld_out;
wire    dec_ctrl_V_V_1_ack_in;
wire    dec_ctrl_V_V_1_ack_out;
reg   [31:0] dec_ctrl_V_V_1_payload_A;
reg   [31:0] dec_ctrl_V_V_1_payload_B;
reg    dec_ctrl_V_V_1_sel_rd;
reg    dec_ctrl_V_V_1_sel_wr;
wire    dec_ctrl_V_V_1_sel;
wire    dec_ctrl_V_V_1_load_A;
wire    dec_ctrl_V_V_1_load_B;
reg   [1:0] dec_ctrl_V_V_1_state;
wire    dec_ctrl_V_V_1_state_cmp_full;
wire   [7:0] dec_din_words_V_data_V_1_data_out;
reg    dec_din_words_V_data_V_1_vld_in;
wire    dec_din_words_V_data_V_1_vld_out;
wire    dec_din_words_V_data_V_1_ack_in;
wire    dec_din_words_V_data_V_1_ack_out;
reg    dec_din_words_V_data_V_1_sel_rd;
wire    dec_din_words_V_data_V_1_sel;
reg   [1:0] dec_din_words_V_data_V_1_state;
wire   [0:0] dec_din_words_V_last_V_1_data_out;
reg    dec_din_words_V_last_V_1_vld_in;
wire    dec_din_words_V_last_V_1_vld_out;
wire    dec_din_words_V_last_V_1_ack_in;
wire    dec_din_words_V_last_V_1_ack_out;
reg    dec_din_words_V_last_V_1_sel_rd;
wire    dec_din_words_V_last_V_1_sel;
reg   [1:0] dec_din_words_V_last_V_1_state;
wire   [7:0] dec_dout_words_V_data_V_1_data_out;
reg    dec_dout_words_V_data_V_1_vld_in;
wire    dec_dout_words_V_data_V_1_vld_out;
wire    dec_dout_words_V_data_V_1_ack_in;
wire    dec_dout_words_V_data_V_1_ack_out;
reg    dec_dout_words_V_data_V_1_sel_rd;
wire    dec_dout_words_V_data_V_1_sel;
reg   [1:0] dec_dout_words_V_data_V_1_state;
wire   [0:0] dec_dout_words_V_last_V_1_data_out;
reg    dec_dout_words_V_last_V_1_vld_in;
wire    dec_dout_words_V_last_V_1_vld_out;
wire    dec_dout_words_V_last_V_1_ack_in;
wire    dec_dout_words_V_last_V_1_ack_out;
reg    dec_dout_words_V_last_V_1_sel_rd;
wire    dec_dout_words_V_last_V_1_sel;
reg   [1:0] dec_dout_words_V_last_V_1_state;
reg    dec_ctrl_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    dec_din_words_TDATA_blk_n;
reg    dec_dout_words_TDATA_blk_n;
wire   [31:0] p_Result_1_fu_97_p5;
reg    ap_block_state1_io;
wire   [31:0] p_Result_s_fu_85_p5;
reg    ap_block_state2;
reg    ap_block_state2_io;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 dec_ctrl_V_V_1_sel_rd = 1'b0;
#0 dec_ctrl_V_V_1_sel_wr = 1'b0;
#0 dec_ctrl_V_V_1_state = 2'd0;
#0 dec_din_words_V_data_V_1_sel_rd = 1'b0;
#0 dec_din_words_V_data_V_1_state = 2'd0;
#0 dec_din_words_V_last_V_1_sel_rd = 1'b0;
#0 dec_din_words_V_last_V_1_state = 2'd0;
#0 dec_dout_words_V_data_V_1_sel_rd = 1'b0;
#0 dec_dout_words_V_data_V_1_state = 2'd0;
#0 dec_dout_words_V_last_V_1_sel_rd = 1'b0;
#0 dec_dout_words_V_last_V_1_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_ctrl_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dec_ctrl_V_V_1_ack_out == 1'b1) & (dec_ctrl_V_V_1_vld_out == 1'b1))) begin
            dec_ctrl_V_V_1_sel_rd <= ~dec_ctrl_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_ctrl_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dec_ctrl_V_V_1_ack_in == 1'b1) & (dec_ctrl_V_V_1_vld_in == 1'b1))) begin
            dec_ctrl_V_V_1_sel_wr <= ~dec_ctrl_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_ctrl_V_V_1_state <= 2'd0;
    end else begin
        if ((((dec_ctrl_V_V_1_state == 2'd2) & (dec_ctrl_V_V_1_vld_in == 1'b0)) | ((dec_ctrl_V_V_1_state == 2'd3) & (dec_ctrl_V_V_1_vld_in == 1'b0) & (dec_ctrl_V_V_1_ack_out == 1'b1)))) begin
            dec_ctrl_V_V_1_state <= 2'd2;
        end else if ((((dec_ctrl_V_V_1_state == 2'd1) & (dec_ctrl_V_V_1_ack_out == 1'b0)) | ((dec_ctrl_V_V_1_state == 2'd3) & (dec_ctrl_V_V_1_ack_out == 1'b0) & (dec_ctrl_V_V_1_vld_in == 1'b1)))) begin
            dec_ctrl_V_V_1_state <= 2'd1;
        end else if (((~((dec_ctrl_V_V_1_vld_in == 1'b0) & (dec_ctrl_V_V_1_ack_out == 1'b1)) & ~((dec_ctrl_V_V_1_ack_out == 1'b0) & (dec_ctrl_V_V_1_vld_in == 1'b1)) & (dec_ctrl_V_V_1_state == 2'd3)) | ((dec_ctrl_V_V_1_state == 2'd1) & (dec_ctrl_V_V_1_ack_out == 1'b1)) | ((dec_ctrl_V_V_1_state == 2'd2) & (dec_ctrl_V_V_1_vld_in == 1'b1)))) begin
            dec_ctrl_V_V_1_state <= 2'd3;
        end else begin
            dec_ctrl_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_din_words_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dec_din_words_V_data_V_1_vld_out == 1'b1) & (dec_din_words_V_data_V_1_ack_out == 1'b1))) begin
            dec_din_words_V_data_V_1_sel_rd <= ~dec_din_words_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_din_words_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((dec_din_words_V_data_V_1_state == 2'd2) & (dec_din_words_V_data_V_1_vld_in == 1'b0)) | ((dec_din_words_V_data_V_1_state == 2'd3) & (dec_din_words_V_data_V_1_vld_in == 1'b0) & (dec_din_words_V_data_V_1_ack_out == 1'b1)))) begin
            dec_din_words_V_data_V_1_state <= 2'd2;
        end else if ((((dec_din_words_V_data_V_1_state == 2'd1) & (dec_din_words_V_data_V_1_ack_out == 1'b0)) | ((dec_din_words_V_data_V_1_state == 2'd3) & (dec_din_words_V_data_V_1_ack_out == 1'b0) & (dec_din_words_V_data_V_1_vld_in == 1'b1)))) begin
            dec_din_words_V_data_V_1_state <= 2'd1;
        end else if (((~((dec_din_words_V_data_V_1_vld_in == 1'b0) & (dec_din_words_V_data_V_1_ack_out == 1'b1)) & ~((dec_din_words_V_data_V_1_ack_out == 1'b0) & (dec_din_words_V_data_V_1_vld_in == 1'b1)) & (dec_din_words_V_data_V_1_state == 2'd3)) | ((dec_din_words_V_data_V_1_state == 2'd1) & (dec_din_words_V_data_V_1_ack_out == 1'b1)) | ((dec_din_words_V_data_V_1_state == 2'd2) & (dec_din_words_V_data_V_1_vld_in == 1'b1)))) begin
            dec_din_words_V_data_V_1_state <= 2'd3;
        end else begin
            dec_din_words_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_din_words_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dec_din_words_V_last_V_1_ack_out == 1'b1) & (dec_din_words_V_last_V_1_vld_out == 1'b1))) begin
            dec_din_words_V_last_V_1_sel_rd <= ~dec_din_words_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_din_words_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((dec_din_words_V_last_V_1_state == 2'd2) & (dec_din_words_V_last_V_1_vld_in == 1'b0)) | ((dec_din_words_V_last_V_1_state == 2'd3) & (dec_din_words_V_last_V_1_vld_in == 1'b0) & (dec_din_words_V_last_V_1_ack_out == 1'b1)))) begin
            dec_din_words_V_last_V_1_state <= 2'd2;
        end else if ((((dec_din_words_V_last_V_1_state == 2'd1) & (dec_din_words_V_last_V_1_ack_out == 1'b0)) | ((dec_din_words_V_last_V_1_state == 2'd3) & (dec_din_words_V_last_V_1_ack_out == 1'b0) & (dec_din_words_V_last_V_1_vld_in == 1'b1)))) begin
            dec_din_words_V_last_V_1_state <= 2'd1;
        end else if (((~((dec_din_words_V_last_V_1_vld_in == 1'b0) & (dec_din_words_V_last_V_1_ack_out == 1'b1)) & ~((dec_din_words_V_last_V_1_ack_out == 1'b0) & (dec_din_words_V_last_V_1_vld_in == 1'b1)) & (dec_din_words_V_last_V_1_state == 2'd3)) | ((dec_din_words_V_last_V_1_state == 2'd1) & (dec_din_words_V_last_V_1_ack_out == 1'b1)) | ((dec_din_words_V_last_V_1_state == 2'd2) & (dec_din_words_V_last_V_1_vld_in == 1'b1)))) begin
            dec_din_words_V_last_V_1_state <= 2'd3;
        end else begin
            dec_din_words_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_dout_words_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dec_dout_words_V_data_V_1_ack_out == 1'b1) & (dec_dout_words_V_data_V_1_vld_out == 1'b1))) begin
            dec_dout_words_V_data_V_1_sel_rd <= ~dec_dout_words_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_dout_words_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((dec_dout_words_V_data_V_1_state == 2'd2) & (dec_dout_words_V_data_V_1_vld_in == 1'b0)) | ((dec_dout_words_V_data_V_1_state == 2'd3) & (dec_dout_words_V_data_V_1_vld_in == 1'b0) & (dec_dout_words_V_data_V_1_ack_out == 1'b1)))) begin
            dec_dout_words_V_data_V_1_state <= 2'd2;
        end else if ((((dec_dout_words_V_data_V_1_state == 2'd1) & (dec_dout_words_V_data_V_1_ack_out == 1'b0)) | ((dec_dout_words_V_data_V_1_state == 2'd3) & (dec_dout_words_V_data_V_1_ack_out == 1'b0) & (dec_dout_words_V_data_V_1_vld_in == 1'b1)))) begin
            dec_dout_words_V_data_V_1_state <= 2'd1;
        end else if (((~((dec_dout_words_V_data_V_1_vld_in == 1'b0) & (dec_dout_words_V_data_V_1_ack_out == 1'b1)) & ~((dec_dout_words_V_data_V_1_ack_out == 1'b0) & (dec_dout_words_V_data_V_1_vld_in == 1'b1)) & (dec_dout_words_V_data_V_1_state == 2'd3)) | ((dec_dout_words_V_data_V_1_state == 2'd1) & (dec_dout_words_V_data_V_1_ack_out == 1'b1)) | ((dec_dout_words_V_data_V_1_state == 2'd2) & (dec_dout_words_V_data_V_1_vld_in == 1'b1)))) begin
            dec_dout_words_V_data_V_1_state <= 2'd3;
        end else begin
            dec_dout_words_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_dout_words_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dec_dout_words_V_last_V_1_ack_out == 1'b1) & (dec_dout_words_V_last_V_1_vld_out == 1'b1))) begin
            dec_dout_words_V_last_V_1_sel_rd <= ~dec_dout_words_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_dout_words_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((dec_dout_words_V_last_V_1_state == 2'd2) & (dec_dout_words_V_last_V_1_vld_in == 1'b0)) | ((dec_dout_words_V_last_V_1_state == 2'd3) & (dec_dout_words_V_last_V_1_vld_in == 1'b0) & (dec_dout_words_V_last_V_1_ack_out == 1'b1)))) begin
            dec_dout_words_V_last_V_1_state <= 2'd2;
        end else if ((((dec_dout_words_V_last_V_1_state == 2'd1) & (dec_dout_words_V_last_V_1_ack_out == 1'b0)) | ((dec_dout_words_V_last_V_1_state == 2'd3) & (dec_dout_words_V_last_V_1_ack_out == 1'b0) & (dec_dout_words_V_last_V_1_vld_in == 1'b1)))) begin
            dec_dout_words_V_last_V_1_state <= 2'd1;
        end else if (((~((dec_dout_words_V_last_V_1_vld_in == 1'b0) & (dec_dout_words_V_last_V_1_ack_out == 1'b1)) & ~((dec_dout_words_V_last_V_1_ack_out == 1'b0) & (dec_dout_words_V_last_V_1_vld_in == 1'b1)) & (dec_dout_words_V_last_V_1_state == 2'd3)) | ((dec_dout_words_V_last_V_1_state == 2'd1) & (dec_dout_words_V_last_V_1_ack_out == 1'b1)) | ((dec_dout_words_V_last_V_1_state == 2'd2) & (dec_dout_words_V_last_V_1_vld_in == 1'b1)))) begin
            dec_dout_words_V_last_V_1_state <= 2'd3;
        end else begin
            dec_dout_words_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((dec_ctrl_V_V_1_load_A == 1'b1)) begin
        dec_ctrl_V_V_1_payload_A <= p_Result_1_fu_97_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((dec_ctrl_V_V_1_load_B == 1'b1)) begin
        dec_ctrl_V_V_1_payload_B <= p_Result_1_fu_97_p5;
    end
end

always @ (*) begin
    if ((~((dec_din_words_V_data_V_1_ack_in == 1'b0) | (dec_ctrl_V_V_1_ack_in == 1'b0) | (dec_dout_words_V_last_V_1_ack_in == 1'b0) | (dec_dout_words_V_data_V_1_ack_in == 1'b0) | (dec_din_words_V_last_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (dec_ctrl_V_V_1_state[1'd0] == 1'b0) & (dec_dout_words_V_last_V_1_state[1'd0] == 1'b0) & (dec_dout_words_V_data_V_1_state[1'd0] == 1'b0) & (dec_din_words_V_last_V_1_state[1'd0] == 1'b0) & (dec_din_words_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((dec_din_words_V_data_V_1_ack_in == 1'b0) | (dec_ctrl_V_V_1_ack_in == 1'b0) | (dec_dout_words_V_last_V_1_ack_in == 1'b0) | (dec_dout_words_V_data_V_1_ack_in == 1'b0) | (dec_din_words_V_last_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (dec_ctrl_V_V_1_state[1'd0] == 1'b0) & (dec_dout_words_V_last_V_1_state[1'd0] == 1'b0) & (dec_dout_words_V_data_V_1_state[1'd0] == 1'b0) & (dec_din_words_V_last_V_1_state[1'd0] == 1'b0) & (dec_din_words_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((dec_ctrl_V_V_1_sel == 1'b1)) begin
        dec_ctrl_V_V_1_data_out = dec_ctrl_V_V_1_payload_B;
    end else begin
        dec_ctrl_V_V_1_data_out = dec_ctrl_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        dec_ctrl_V_V_1_vld_in = 1'b1;
    end else begin
        dec_ctrl_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        dec_ctrl_V_V_TDATA_blk_n = dec_ctrl_V_V_1_state[1'd1];
    end else begin
        dec_ctrl_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        dec_din_words_TDATA_blk_n = dec_din_words_V_data_V_1_state[1'd1];
    end else begin
        dec_din_words_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        dec_din_words_V_data_V_1_vld_in = 1'b1;
    end else begin
        dec_din_words_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        dec_din_words_V_last_V_1_vld_in = 1'b1;
    end else begin
        dec_din_words_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        dec_dout_words_TDATA_blk_n = dec_dout_words_V_data_V_1_state[1'd1];
    end else begin
        dec_dout_words_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        dec_dout_words_V_data_V_1_vld_in = 1'b1;
    end else begin
        dec_dout_words_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        dec_dout_words_V_last_V_1_vld_in = 1'b1;
    end else begin
        dec_dout_words_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((dec_din_words_V_data_V_1_ack_in == 1'b0) | (dec_ctrl_V_V_1_ack_in == 1'b0) | (dec_dout_words_V_last_V_1_ack_in == 1'b0) | (dec_dout_words_V_data_V_1_ack_in == 1'b0) | (dec_din_words_V_last_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state2_io)) & (dec_ctrl_V_V_1_state[1'd0] == 1'b0) & (dec_dout_words_V_last_V_1_state[1'd0] == 1'b0) & (dec_dout_words_V_data_V_1_state[1'd0] == 1'b0) & (dec_din_words_V_last_V_1_state[1'd0] == 1'b0) & (dec_din_words_V_data_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_io = ((dec_din_words_V_data_V_1_ack_in == 1'b0) | (dec_ctrl_V_V_1_ack_in == 1'b0) | (dec_dout_words_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((dec_din_words_V_data_V_1_ack_in == 1'b0) | (dec_ctrl_V_V_1_ack_in == 1'b0) | (dec_dout_words_V_last_V_1_ack_in == 1'b0) | (dec_dout_words_V_data_V_1_ack_in == 1'b0) | (dec_din_words_V_last_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((dec_din_words_V_data_V_1_ack_in == 1'b0) | (dec_ctrl_V_V_1_ack_in == 1'b0) | (dec_dout_words_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dec_ctrl_V_V_1_ack_in = dec_ctrl_V_V_1_state[1'd1];

assign dec_ctrl_V_V_1_ack_out = dec_ctrl_V_V_TREADY;

assign dec_ctrl_V_V_1_load_A = (~dec_ctrl_V_V_1_sel_wr & dec_ctrl_V_V_1_state_cmp_full);

assign dec_ctrl_V_V_1_load_B = (dec_ctrl_V_V_1_state_cmp_full & dec_ctrl_V_V_1_sel_wr);

assign dec_ctrl_V_V_1_sel = dec_ctrl_V_V_1_sel_rd;

assign dec_ctrl_V_V_1_state_cmp_full = ((dec_ctrl_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dec_ctrl_V_V_1_vld_out = dec_ctrl_V_V_1_state[1'd0];

assign dec_ctrl_V_V_TDATA = dec_ctrl_V_V_1_data_out;

assign dec_ctrl_V_V_TVALID = dec_ctrl_V_V_1_state[1'd0];

assign dec_din_words_TDATA = dec_din_words_V_data_V_1_data_out;

assign dec_din_words_TLAST = dec_din_words_V_last_V_1_data_out;

assign dec_din_words_TVALID = dec_din_words_V_last_V_1_state[1'd0];

assign dec_din_words_V_data_V_1_ack_in = dec_din_words_V_data_V_1_state[1'd1];

assign dec_din_words_V_data_V_1_ack_out = dec_din_words_TREADY;

assign dec_din_words_V_data_V_1_data_out = 8'd16;

assign dec_din_words_V_data_V_1_sel = dec_din_words_V_data_V_1_sel_rd;

assign dec_din_words_V_data_V_1_vld_out = dec_din_words_V_data_V_1_state[1'd0];

assign dec_din_words_V_last_V_1_ack_in = dec_din_words_V_last_V_1_state[1'd1];

assign dec_din_words_V_last_V_1_ack_out = dec_din_words_TREADY;

assign dec_din_words_V_last_V_1_data_out = 1'd1;

assign dec_din_words_V_last_V_1_sel = dec_din_words_V_last_V_1_sel_rd;

assign dec_din_words_V_last_V_1_vld_out = dec_din_words_V_last_V_1_state[1'd0];

assign dec_dout_words_TDATA = dec_dout_words_V_data_V_1_data_out;

assign dec_dout_words_TLAST = dec_dout_words_V_last_V_1_data_out;

assign dec_dout_words_TVALID = dec_dout_words_V_last_V_1_state[1'd0];

assign dec_dout_words_V_data_V_1_ack_in = dec_dout_words_V_data_V_1_state[1'd1];

assign dec_dout_words_V_data_V_1_ack_out = dec_dout_words_TREADY;

assign dec_dout_words_V_data_V_1_data_out = 8'd8;

assign dec_dout_words_V_data_V_1_sel = dec_dout_words_V_data_V_1_sel_rd;

assign dec_dout_words_V_data_V_1_vld_out = dec_dout_words_V_data_V_1_state[1'd0];

assign dec_dout_words_V_last_V_1_ack_in = dec_dout_words_V_last_V_1_state[1'd1];

assign dec_dout_words_V_last_V_1_ack_out = dec_dout_words_TREADY;

assign dec_dout_words_V_last_V_1_data_out = 1'd1;

assign dec_dout_words_V_last_V_1_sel = dec_dout_words_V_last_V_1_sel_rd;

assign dec_dout_words_V_last_V_1_vld_out = dec_dout_words_V_last_V_1_state[1'd0];

assign p_Result_1_fu_97_p5 = {{p_Result_s_fu_85_p5[31:9]}, {9'd0}};

assign p_Result_s_fu_85_p5 = {{8'd0}, {ap_const_lv32_0[23:0]}};

endmodule //config_decoder
