-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity config_decoder is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dec_ctrl_V_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    dec_ctrl_V_V_TVALID : OUT STD_LOGIC;
    dec_ctrl_V_V_TREADY : IN STD_LOGIC;
    dec_din_words_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    dec_din_words_TVALID : OUT STD_LOGIC;
    dec_din_words_TREADY : IN STD_LOGIC;
    dec_din_words_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    dec_dout_words_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    dec_dout_words_TVALID : OUT STD_LOGIC;
    dec_dout_words_TREADY : IN STD_LOGIC;
    dec_dout_words_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of config_decoder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "config_decoder,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu21dr-ffvd1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=82,HLS_SYN_LUT=142,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv8_10 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dec_ctrl_V_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal dec_ctrl_V_V_1_vld_in : STD_LOGIC;
    signal dec_ctrl_V_V_1_vld_out : STD_LOGIC;
    signal dec_ctrl_V_V_1_ack_in : STD_LOGIC;
    signal dec_ctrl_V_V_1_ack_out : STD_LOGIC;
    signal dec_ctrl_V_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal dec_ctrl_V_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal dec_ctrl_V_V_1_sel_rd : STD_LOGIC := '0';
    signal dec_ctrl_V_V_1_sel_wr : STD_LOGIC := '0';
    signal dec_ctrl_V_V_1_sel : STD_LOGIC;
    signal dec_ctrl_V_V_1_load_A : STD_LOGIC;
    signal dec_ctrl_V_V_1_load_B : STD_LOGIC;
    signal dec_ctrl_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dec_ctrl_V_V_1_state_cmp_full : STD_LOGIC;
    signal dec_din_words_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal dec_din_words_V_data_V_1_vld_in : STD_LOGIC;
    signal dec_din_words_V_data_V_1_vld_out : STD_LOGIC;
    signal dec_din_words_V_data_V_1_ack_in : STD_LOGIC;
    signal dec_din_words_V_data_V_1_ack_out : STD_LOGIC;
    signal dec_din_words_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal dec_din_words_V_data_V_1_sel : STD_LOGIC;
    signal dec_din_words_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dec_din_words_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dec_din_words_V_last_V_1_vld_in : STD_LOGIC;
    signal dec_din_words_V_last_V_1_vld_out : STD_LOGIC;
    signal dec_din_words_V_last_V_1_ack_in : STD_LOGIC;
    signal dec_din_words_V_last_V_1_ack_out : STD_LOGIC;
    signal dec_din_words_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal dec_din_words_V_last_V_1_sel : STD_LOGIC;
    signal dec_din_words_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dec_dout_words_V_data_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal dec_dout_words_V_data_V_1_vld_in : STD_LOGIC;
    signal dec_dout_words_V_data_V_1_vld_out : STD_LOGIC;
    signal dec_dout_words_V_data_V_1_ack_in : STD_LOGIC;
    signal dec_dout_words_V_data_V_1_ack_out : STD_LOGIC;
    signal dec_dout_words_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal dec_dout_words_V_data_V_1_sel : STD_LOGIC;
    signal dec_dout_words_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dec_dout_words_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dec_dout_words_V_last_V_1_vld_in : STD_LOGIC;
    signal dec_dout_words_V_last_V_1_vld_out : STD_LOGIC;
    signal dec_dout_words_V_last_V_1_ack_in : STD_LOGIC;
    signal dec_dout_words_V_last_V_1_ack_out : STD_LOGIC;
    signal dec_dout_words_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal dec_dout_words_V_last_V_1_sel : STD_LOGIC;
    signal dec_dout_words_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dec_ctrl_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal dec_din_words_TDATA_blk_n : STD_LOGIC;
    signal dec_dout_words_TDATA_blk_n : STD_LOGIC;
    signal p_Result_1_fu_97_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_io : BOOLEAN;
    signal p_Result_s_fu_85_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    dec_ctrl_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_ctrl_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dec_ctrl_V_V_1_ack_out = ap_const_logic_1) and (dec_ctrl_V_V_1_vld_out = ap_const_logic_1))) then 
                                        dec_ctrl_V_V_1_sel_rd <= not(dec_ctrl_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dec_ctrl_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_ctrl_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dec_ctrl_V_V_1_ack_in = ap_const_logic_1) and (dec_ctrl_V_V_1_vld_in = ap_const_logic_1))) then 
                                        dec_ctrl_V_V_1_sel_wr <= not(dec_ctrl_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dec_ctrl_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_ctrl_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((dec_ctrl_V_V_1_state = ap_const_lv2_2) and (dec_ctrl_V_V_1_vld_in = ap_const_logic_0)) or ((dec_ctrl_V_V_1_state = ap_const_lv2_3) and (dec_ctrl_V_V_1_vld_in = ap_const_logic_0) and (dec_ctrl_V_V_1_ack_out = ap_const_logic_1)))) then 
                    dec_ctrl_V_V_1_state <= ap_const_lv2_2;
                elsif ((((dec_ctrl_V_V_1_state = ap_const_lv2_1) and (dec_ctrl_V_V_1_ack_out = ap_const_logic_0)) or ((dec_ctrl_V_V_1_state = ap_const_lv2_3) and (dec_ctrl_V_V_1_ack_out = ap_const_logic_0) and (dec_ctrl_V_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_ctrl_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dec_ctrl_V_V_1_vld_in = ap_const_logic_0) and (dec_ctrl_V_V_1_ack_out = ap_const_logic_1))) and not(((dec_ctrl_V_V_1_ack_out = ap_const_logic_0) and (dec_ctrl_V_V_1_vld_in = ap_const_logic_1))) and (dec_ctrl_V_V_1_state = ap_const_lv2_3)) or ((dec_ctrl_V_V_1_state = ap_const_lv2_1) and (dec_ctrl_V_V_1_ack_out = ap_const_logic_1)) or ((dec_ctrl_V_V_1_state = ap_const_lv2_2) and (dec_ctrl_V_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_ctrl_V_V_1_state <= ap_const_lv2_3;
                else 
                    dec_ctrl_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dec_din_words_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_din_words_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dec_din_words_V_data_V_1_vld_out = ap_const_logic_1) and (dec_din_words_V_data_V_1_ack_out = ap_const_logic_1))) then 
                                        dec_din_words_V_data_V_1_sel_rd <= not(dec_din_words_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dec_din_words_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_din_words_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((dec_din_words_V_data_V_1_state = ap_const_lv2_2) and (dec_din_words_V_data_V_1_vld_in = ap_const_logic_0)) or ((dec_din_words_V_data_V_1_state = ap_const_lv2_3) and (dec_din_words_V_data_V_1_vld_in = ap_const_logic_0) and (dec_din_words_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    dec_din_words_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((dec_din_words_V_data_V_1_state = ap_const_lv2_1) and (dec_din_words_V_data_V_1_ack_out = ap_const_logic_0)) or ((dec_din_words_V_data_V_1_state = ap_const_lv2_3) and (dec_din_words_V_data_V_1_ack_out = ap_const_logic_0) and (dec_din_words_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_din_words_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dec_din_words_V_data_V_1_vld_in = ap_const_logic_0) and (dec_din_words_V_data_V_1_ack_out = ap_const_logic_1))) and not(((dec_din_words_V_data_V_1_ack_out = ap_const_logic_0) and (dec_din_words_V_data_V_1_vld_in = ap_const_logic_1))) and (dec_din_words_V_data_V_1_state = ap_const_lv2_3)) or ((dec_din_words_V_data_V_1_state = ap_const_lv2_1) and (dec_din_words_V_data_V_1_ack_out = ap_const_logic_1)) or ((dec_din_words_V_data_V_1_state = ap_const_lv2_2) and (dec_din_words_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_din_words_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    dec_din_words_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dec_din_words_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_din_words_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dec_din_words_V_last_V_1_ack_out = ap_const_logic_1) and (dec_din_words_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        dec_din_words_V_last_V_1_sel_rd <= not(dec_din_words_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dec_din_words_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_din_words_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((dec_din_words_V_last_V_1_state = ap_const_lv2_2) and (dec_din_words_V_last_V_1_vld_in = ap_const_logic_0)) or ((dec_din_words_V_last_V_1_state = ap_const_lv2_3) and (dec_din_words_V_last_V_1_vld_in = ap_const_logic_0) and (dec_din_words_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    dec_din_words_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((dec_din_words_V_last_V_1_state = ap_const_lv2_1) and (dec_din_words_V_last_V_1_ack_out = ap_const_logic_0)) or ((dec_din_words_V_last_V_1_state = ap_const_lv2_3) and (dec_din_words_V_last_V_1_ack_out = ap_const_logic_0) and (dec_din_words_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_din_words_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dec_din_words_V_last_V_1_vld_in = ap_const_logic_0) and (dec_din_words_V_last_V_1_ack_out = ap_const_logic_1))) and not(((dec_din_words_V_last_V_1_ack_out = ap_const_logic_0) and (dec_din_words_V_last_V_1_vld_in = ap_const_logic_1))) and (dec_din_words_V_last_V_1_state = ap_const_lv2_3)) or ((dec_din_words_V_last_V_1_state = ap_const_lv2_1) and (dec_din_words_V_last_V_1_ack_out = ap_const_logic_1)) or ((dec_din_words_V_last_V_1_state = ap_const_lv2_2) and (dec_din_words_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_din_words_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    dec_din_words_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dec_dout_words_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_dout_words_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dec_dout_words_V_data_V_1_ack_out = ap_const_logic_1) and (dec_dout_words_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        dec_dout_words_V_data_V_1_sel_rd <= not(dec_dout_words_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dec_dout_words_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_dout_words_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((dec_dout_words_V_data_V_1_state = ap_const_lv2_2) and (dec_dout_words_V_data_V_1_vld_in = ap_const_logic_0)) or ((dec_dout_words_V_data_V_1_state = ap_const_lv2_3) and (dec_dout_words_V_data_V_1_vld_in = ap_const_logic_0) and (dec_dout_words_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    dec_dout_words_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((dec_dout_words_V_data_V_1_state = ap_const_lv2_1) and (dec_dout_words_V_data_V_1_ack_out = ap_const_logic_0)) or ((dec_dout_words_V_data_V_1_state = ap_const_lv2_3) and (dec_dout_words_V_data_V_1_ack_out = ap_const_logic_0) and (dec_dout_words_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_dout_words_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dec_dout_words_V_data_V_1_vld_in = ap_const_logic_0) and (dec_dout_words_V_data_V_1_ack_out = ap_const_logic_1))) and not(((dec_dout_words_V_data_V_1_ack_out = ap_const_logic_0) and (dec_dout_words_V_data_V_1_vld_in = ap_const_logic_1))) and (dec_dout_words_V_data_V_1_state = ap_const_lv2_3)) or ((dec_dout_words_V_data_V_1_state = ap_const_lv2_1) and (dec_dout_words_V_data_V_1_ack_out = ap_const_logic_1)) or ((dec_dout_words_V_data_V_1_state = ap_const_lv2_2) and (dec_dout_words_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_dout_words_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    dec_dout_words_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dec_dout_words_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_dout_words_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dec_dout_words_V_last_V_1_ack_out = ap_const_logic_1) and (dec_dout_words_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        dec_dout_words_V_last_V_1_sel_rd <= not(dec_dout_words_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dec_dout_words_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_dout_words_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((dec_dout_words_V_last_V_1_state = ap_const_lv2_2) and (dec_dout_words_V_last_V_1_vld_in = ap_const_logic_0)) or ((dec_dout_words_V_last_V_1_state = ap_const_lv2_3) and (dec_dout_words_V_last_V_1_vld_in = ap_const_logic_0) and (dec_dout_words_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    dec_dout_words_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((dec_dout_words_V_last_V_1_state = ap_const_lv2_1) and (dec_dout_words_V_last_V_1_ack_out = ap_const_logic_0)) or ((dec_dout_words_V_last_V_1_state = ap_const_lv2_3) and (dec_dout_words_V_last_V_1_ack_out = ap_const_logic_0) and (dec_dout_words_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_dout_words_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dec_dout_words_V_last_V_1_vld_in = ap_const_logic_0) and (dec_dout_words_V_last_V_1_ack_out = ap_const_logic_1))) and not(((dec_dout_words_V_last_V_1_ack_out = ap_const_logic_0) and (dec_dout_words_V_last_V_1_vld_in = ap_const_logic_1))) and (dec_dout_words_V_last_V_1_state = ap_const_lv2_3)) or ((dec_dout_words_V_last_V_1_state = ap_const_lv2_1) and (dec_dout_words_V_last_V_1_ack_out = ap_const_logic_1)) or ((dec_dout_words_V_last_V_1_state = ap_const_lv2_2) and (dec_dout_words_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_dout_words_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    dec_dout_words_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dec_ctrl_V_V_1_load_A = ap_const_logic_1)) then
                dec_ctrl_V_V_1_payload_A <= p_Result_1_fu_97_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dec_ctrl_V_V_1_load_B = ap_const_logic_1)) then
                dec_ctrl_V_V_1_payload_B <= p_Result_1_fu_97_p5;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, dec_ctrl_V_V_1_ack_in, dec_ctrl_V_V_1_state, dec_din_words_V_data_V_1_ack_in, dec_din_words_V_data_V_1_state, dec_din_words_V_last_V_1_ack_in, dec_din_words_V_last_V_1_state, dec_dout_words_V_data_V_1_ack_in, dec_dout_words_V_data_V_1_state, dec_dout_words_V_last_V_1_ack_in, dec_dout_words_V_last_V_1_state, ap_CS_fsm_state2, ap_block_state1_io, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((dec_din_words_V_data_V_1_ack_in = ap_const_logic_0) or (dec_ctrl_V_V_1_ack_in = ap_const_logic_0) or (dec_dout_words_V_last_V_1_ack_in = ap_const_logic_0) or (dec_dout_words_V_data_V_1_ack_in = ap_const_logic_0) or (dec_din_words_V_last_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (dec_ctrl_V_V_1_state(0) = ap_const_logic_0) and (dec_dout_words_V_last_V_1_state(0) = ap_const_logic_0) and (dec_dout_words_V_data_V_1_state(0) = ap_const_logic_0) and (dec_din_words_V_last_V_1_state(0) = ap_const_logic_0) and (dec_din_words_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_io_assign_proc : process(dec_ctrl_V_V_1_ack_in, dec_din_words_V_data_V_1_ack_in, dec_dout_words_V_data_V_1_ack_in)
    begin
                ap_block_state1_io <= ((dec_din_words_V_data_V_1_ack_in = ap_const_logic_0) or (dec_ctrl_V_V_1_ack_in = ap_const_logic_0) or (dec_dout_words_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state2_assign_proc : process(dec_ctrl_V_V_1_ack_in, dec_din_words_V_data_V_1_ack_in, dec_din_words_V_last_V_1_ack_in, dec_dout_words_V_data_V_1_ack_in, dec_dout_words_V_last_V_1_ack_in)
    begin
                ap_block_state2 <= ((dec_din_words_V_data_V_1_ack_in = ap_const_logic_0) or (dec_ctrl_V_V_1_ack_in = ap_const_logic_0) or (dec_dout_words_V_last_V_1_ack_in = ap_const_logic_0) or (dec_dout_words_V_data_V_1_ack_in = ap_const_logic_0) or (dec_din_words_V_last_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(dec_ctrl_V_V_1_ack_in, dec_din_words_V_data_V_1_ack_in, dec_dout_words_V_data_V_1_ack_in)
    begin
                ap_block_state2_io <= ((dec_din_words_V_data_V_1_ack_in = ap_const_logic_0) or (dec_ctrl_V_V_1_ack_in = ap_const_logic_0) or (dec_dout_words_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(dec_ctrl_V_V_1_ack_in, dec_ctrl_V_V_1_state, dec_din_words_V_data_V_1_ack_in, dec_din_words_V_data_V_1_state, dec_din_words_V_last_V_1_ack_in, dec_din_words_V_last_V_1_state, dec_dout_words_V_data_V_1_ack_in, dec_dout_words_V_data_V_1_state, dec_dout_words_V_last_V_1_ack_in, dec_dout_words_V_last_V_1_state, ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if ((not(((dec_din_words_V_data_V_1_ack_in = ap_const_logic_0) or (dec_ctrl_V_V_1_ack_in = ap_const_logic_0) or (dec_dout_words_V_last_V_1_ack_in = ap_const_logic_0) or (dec_dout_words_V_data_V_1_ack_in = ap_const_logic_0) or (dec_din_words_V_last_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (dec_ctrl_V_V_1_state(0) = ap_const_logic_0) and (dec_dout_words_V_last_V_1_state(0) = ap_const_logic_0) and (dec_dout_words_V_data_V_1_state(0) = ap_const_logic_0) and (dec_din_words_V_last_V_1_state(0) = ap_const_logic_0) and (dec_din_words_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(dec_ctrl_V_V_1_ack_in, dec_ctrl_V_V_1_state, dec_din_words_V_data_V_1_ack_in, dec_din_words_V_data_V_1_state, dec_din_words_V_last_V_1_ack_in, dec_din_words_V_last_V_1_state, dec_dout_words_V_data_V_1_ack_in, dec_dout_words_V_data_V_1_state, dec_dout_words_V_last_V_1_ack_in, dec_dout_words_V_last_V_1_state, ap_CS_fsm_state2, ap_block_state2_io)
    begin
        if ((not(((dec_din_words_V_data_V_1_ack_in = ap_const_logic_0) or (dec_ctrl_V_V_1_ack_in = ap_const_logic_0) or (dec_dout_words_V_last_V_1_ack_in = ap_const_logic_0) or (dec_dout_words_V_data_V_1_ack_in = ap_const_logic_0) or (dec_din_words_V_last_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state2_io))) and (dec_ctrl_V_V_1_state(0) = ap_const_logic_0) and (dec_dout_words_V_last_V_1_state(0) = ap_const_logic_0) and (dec_dout_words_V_data_V_1_state(0) = ap_const_logic_0) and (dec_din_words_V_last_V_1_state(0) = ap_const_logic_0) and (dec_din_words_V_data_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    dec_ctrl_V_V_1_ack_in <= dec_ctrl_V_V_1_state(1);
    dec_ctrl_V_V_1_ack_out <= dec_ctrl_V_V_TREADY;

    dec_ctrl_V_V_1_data_out_assign_proc : process(dec_ctrl_V_V_1_payload_A, dec_ctrl_V_V_1_payload_B, dec_ctrl_V_V_1_sel)
    begin
        if ((dec_ctrl_V_V_1_sel = ap_const_logic_1)) then 
            dec_ctrl_V_V_1_data_out <= dec_ctrl_V_V_1_payload_B;
        else 
            dec_ctrl_V_V_1_data_out <= dec_ctrl_V_V_1_payload_A;
        end if; 
    end process;

    dec_ctrl_V_V_1_load_A <= (not(dec_ctrl_V_V_1_sel_wr) and dec_ctrl_V_V_1_state_cmp_full);
    dec_ctrl_V_V_1_load_B <= (dec_ctrl_V_V_1_state_cmp_full and dec_ctrl_V_V_1_sel_wr);
    dec_ctrl_V_V_1_sel <= dec_ctrl_V_V_1_sel_rd;
    dec_ctrl_V_V_1_state_cmp_full <= '0' when (dec_ctrl_V_V_1_state = ap_const_lv2_1) else '1';

    dec_ctrl_V_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dec_ctrl_V_V_1_vld_in <= ap_const_logic_1;
        else 
            dec_ctrl_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dec_ctrl_V_V_1_vld_out <= dec_ctrl_V_V_1_state(0);
    dec_ctrl_V_V_TDATA <= dec_ctrl_V_V_1_data_out;

    dec_ctrl_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, dec_ctrl_V_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            dec_ctrl_V_V_TDATA_blk_n <= dec_ctrl_V_V_1_state(1);
        else 
            dec_ctrl_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dec_ctrl_V_V_TVALID <= dec_ctrl_V_V_1_state(0);
    dec_din_words_TDATA <= dec_din_words_V_data_V_1_data_out;

    dec_din_words_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, dec_din_words_V_data_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            dec_din_words_TDATA_blk_n <= dec_din_words_V_data_V_1_state(1);
        else 
            dec_din_words_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dec_din_words_TLAST <= dec_din_words_V_last_V_1_data_out;
    dec_din_words_TVALID <= dec_din_words_V_last_V_1_state(0);
    dec_din_words_V_data_V_1_ack_in <= dec_din_words_V_data_V_1_state(1);
    dec_din_words_V_data_V_1_ack_out <= dec_din_words_TREADY;
    dec_din_words_V_data_V_1_data_out <= ap_const_lv8_10;
    dec_din_words_V_data_V_1_sel <= dec_din_words_V_data_V_1_sel_rd;

    dec_din_words_V_data_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dec_din_words_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            dec_din_words_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dec_din_words_V_data_V_1_vld_out <= dec_din_words_V_data_V_1_state(0);
    dec_din_words_V_last_V_1_ack_in <= dec_din_words_V_last_V_1_state(1);
    dec_din_words_V_last_V_1_ack_out <= dec_din_words_TREADY;
    dec_din_words_V_last_V_1_data_out <= ap_const_lv1_1;
    dec_din_words_V_last_V_1_sel <= dec_din_words_V_last_V_1_sel_rd;

    dec_din_words_V_last_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dec_din_words_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            dec_din_words_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dec_din_words_V_last_V_1_vld_out <= dec_din_words_V_last_V_1_state(0);
    dec_dout_words_TDATA <= dec_dout_words_V_data_V_1_data_out;

    dec_dout_words_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, dec_dout_words_V_data_V_1_state, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            dec_dout_words_TDATA_blk_n <= dec_dout_words_V_data_V_1_state(1);
        else 
            dec_dout_words_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dec_dout_words_TLAST <= dec_dout_words_V_last_V_1_data_out;
    dec_dout_words_TVALID <= dec_dout_words_V_last_V_1_state(0);
    dec_dout_words_V_data_V_1_ack_in <= dec_dout_words_V_data_V_1_state(1);
    dec_dout_words_V_data_V_1_ack_out <= dec_dout_words_TREADY;
    dec_dout_words_V_data_V_1_data_out <= ap_const_lv8_8;
    dec_dout_words_V_data_V_1_sel <= dec_dout_words_V_data_V_1_sel_rd;

    dec_dout_words_V_data_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dec_dout_words_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            dec_dout_words_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dec_dout_words_V_data_V_1_vld_out <= dec_dout_words_V_data_V_1_state(0);
    dec_dout_words_V_last_V_1_ack_in <= dec_dout_words_V_last_V_1_state(1);
    dec_dout_words_V_last_V_1_ack_out <= dec_dout_words_TREADY;
    dec_dout_words_V_last_V_1_data_out <= ap_const_lv1_1;
    dec_dout_words_V_last_V_1_sel <= dec_dout_words_V_last_V_1_sel_rd;

    dec_dout_words_V_last_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_block_state1_io)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            dec_dout_words_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            dec_dout_words_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dec_dout_words_V_last_V_1_vld_out <= dec_dout_words_V_last_V_1_state(0);
    p_Result_1_fu_97_p5 <= (p_Result_s_fu_85_p5(31 downto 9) & ap_const_lv9_0);
    p_Result_s_fu_85_p5 <= (ap_const_lv8_0 & ap_const_lv32_0(23 downto 0));
end behav;
