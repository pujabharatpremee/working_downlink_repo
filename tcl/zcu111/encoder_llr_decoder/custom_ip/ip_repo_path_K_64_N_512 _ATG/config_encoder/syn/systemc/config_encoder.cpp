// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "config_encoder.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic config_encoder::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic config_encoder::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> config_encoder::ap_ST_fsm_state1 = "1";
const sc_lv<2> config_encoder::ap_ST_fsm_state2 = "10";
const sc_lv<32> config_encoder::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool config_encoder::ap_const_boolean_1 = true;
const sc_lv<1> config_encoder::ap_const_lv1_0 = "0";
const sc_lv<1> config_encoder::ap_const_lv1_1 = "1";
const sc_lv<2> config_encoder::ap_const_lv2_0 = "00";
const sc_lv<2> config_encoder::ap_const_lv2_2 = "10";
const sc_lv<2> config_encoder::ap_const_lv2_3 = "11";
const sc_lv<2> config_encoder::ap_const_lv2_1 = "1";
const sc_lv<32> config_encoder::ap_const_lv32_1 = "1";
const sc_lv<8> config_encoder::ap_const_lv8_4 = "100";
const sc_lv<8> config_encoder::ap_const_lv8_10 = "10000";
const sc_lv<8> config_encoder::ap_const_lv8_0 = "00000000";
const sc_lv<32> config_encoder::ap_const_lv32_18 = "11000";
const sc_lv<32> config_encoder::ap_const_lv32_1F = "11111";
const sc_lv<16> config_encoder::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> config_encoder::ap_const_lv32_8 = "1000";
const sc_lv<32> config_encoder::ap_const_lv32_17 = "10111";
const sc_lv<7> config_encoder::ap_const_lv7_0 = "0000000";
const sc_lv<32> config_encoder::ap_const_lv32_6 = "110";

config_encoder::config_encoder(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1_io);
    sensitive << ( enc_ctrl_V_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_ack_in );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( enc_ctrl_V_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( din_words_V_last_V_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_last_V_1_ack_in );

    SC_METHOD(thread_ap_block_state2_io);
    sensitive << ( enc_ctrl_V_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_ack_in );

    SC_METHOD(thread_ap_done);
    sensitive << ( enc_ctrl_V_V_1_ack_in );
    sensitive << ( enc_ctrl_V_V_1_state );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_state );
    sensitive << ( din_words_V_last_V_1_ack_in );
    sensitive << ( din_words_V_last_V_1_state );
    sensitive << ( dout_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_state );
    sensitive << ( dout_words_V_last_V_1_ack_in );
    sensitive << ( dout_words_V_last_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( enc_ctrl_V_V_1_ack_in );
    sensitive << ( enc_ctrl_V_V_1_state );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_state );
    sensitive << ( din_words_V_last_V_1_ack_in );
    sensitive << ( din_words_V_last_V_1_state );
    sensitive << ( dout_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_state );
    sensitive << ( dout_words_V_last_V_1_ack_in );
    sensitive << ( dout_words_V_last_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_io );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_din_words_TDATA);
    sensitive << ( din_words_V_data_V_1_data_out );

    SC_METHOD(thread_din_words_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( din_words_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_din_words_TLAST);
    sensitive << ( din_words_V_last_V_1_data_out );

    SC_METHOD(thread_din_words_TVALID);
    sensitive << ( din_words_V_last_V_1_state );

    SC_METHOD(thread_din_words_V_data_V_1_ack_in);
    sensitive << ( din_words_V_data_V_1_state );

    SC_METHOD(thread_din_words_V_data_V_1_ack_out);
    sensitive << ( din_words_TREADY );

    SC_METHOD(thread_din_words_V_data_V_1_data_out);
    sensitive << ( din_words_V_data_V_1_sel );

    SC_METHOD(thread_din_words_V_data_V_1_sel);
    sensitive << ( din_words_V_data_V_1_sel_rd );

    SC_METHOD(thread_din_words_V_data_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_din_words_V_data_V_1_vld_out);
    sensitive << ( din_words_V_data_V_1_state );

    SC_METHOD(thread_din_words_V_last_V_1_ack_in);
    sensitive << ( din_words_V_last_V_1_state );

    SC_METHOD(thread_din_words_V_last_V_1_ack_out);
    sensitive << ( din_words_TREADY );

    SC_METHOD(thread_din_words_V_last_V_1_data_out);
    sensitive << ( din_words_V_last_V_1_sel );

    SC_METHOD(thread_din_words_V_last_V_1_sel);
    sensitive << ( din_words_V_last_V_1_sel_rd );

    SC_METHOD(thread_din_words_V_last_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_din_words_V_last_V_1_vld_out);
    sensitive << ( din_words_V_last_V_1_state );

    SC_METHOD(thread_dout_words_TDATA);
    sensitive << ( dout_words_V_data_V_1_data_out );

    SC_METHOD(thread_dout_words_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( dout_words_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_dout_words_TLAST);
    sensitive << ( dout_words_V_last_V_1_data_out );

    SC_METHOD(thread_dout_words_TVALID);
    sensitive << ( dout_words_V_last_V_1_state );

    SC_METHOD(thread_dout_words_V_data_V_1_ack_in);
    sensitive << ( dout_words_V_data_V_1_state );

    SC_METHOD(thread_dout_words_V_data_V_1_ack_out);
    sensitive << ( dout_words_TREADY );

    SC_METHOD(thread_dout_words_V_data_V_1_data_out);
    sensitive << ( dout_words_V_data_V_1_sel );

    SC_METHOD(thread_dout_words_V_data_V_1_sel);
    sensitive << ( dout_words_V_data_V_1_sel_rd );

    SC_METHOD(thread_dout_words_V_data_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_dout_words_V_data_V_1_vld_out);
    sensitive << ( dout_words_V_data_V_1_state );

    SC_METHOD(thread_dout_words_V_last_V_1_ack_in);
    sensitive << ( dout_words_V_last_V_1_state );

    SC_METHOD(thread_dout_words_V_last_V_1_ack_out);
    sensitive << ( dout_words_TREADY );

    SC_METHOD(thread_dout_words_V_last_V_1_data_out);
    sensitive << ( dout_words_V_last_V_1_sel );

    SC_METHOD(thread_dout_words_V_last_V_1_sel);
    sensitive << ( dout_words_V_last_V_1_sel_rd );

    SC_METHOD(thread_dout_words_V_last_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_dout_words_V_last_V_1_vld_out);
    sensitive << ( dout_words_V_last_V_1_state );

    SC_METHOD(thread_enc_ctrl_V_V_1_ack_in);
    sensitive << ( enc_ctrl_V_V_1_state );

    SC_METHOD(thread_enc_ctrl_V_V_1_ack_out);
    sensitive << ( enc_ctrl_V_V_TREADY );

    SC_METHOD(thread_enc_ctrl_V_V_1_data_out);
    sensitive << ( enc_ctrl_V_V_1_payload_A );
    sensitive << ( enc_ctrl_V_V_1_payload_B );
    sensitive << ( enc_ctrl_V_V_1_sel );

    SC_METHOD(thread_enc_ctrl_V_V_1_load_A);
    sensitive << ( enc_ctrl_V_V_1_sel_wr );
    sensitive << ( enc_ctrl_V_V_1_state_cmp_full );

    SC_METHOD(thread_enc_ctrl_V_V_1_load_B);
    sensitive << ( enc_ctrl_V_V_1_sel_wr );
    sensitive << ( enc_ctrl_V_V_1_state_cmp_full );

    SC_METHOD(thread_enc_ctrl_V_V_1_sel);
    sensitive << ( enc_ctrl_V_V_1_sel_rd );

    SC_METHOD(thread_enc_ctrl_V_V_1_state_cmp_full);
    sensitive << ( enc_ctrl_V_V_1_state );

    SC_METHOD(thread_enc_ctrl_V_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_block_state1_io );

    SC_METHOD(thread_enc_ctrl_V_V_1_vld_out);
    sensitive << ( enc_ctrl_V_V_1_state );

    SC_METHOD(thread_enc_ctrl_V_V_TDATA);
    sensitive << ( enc_ctrl_V_V_1_data_out );

    SC_METHOD(thread_enc_ctrl_V_V_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( enc_ctrl_V_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_enc_ctrl_V_V_TVALID);
    sensitive << ( enc_ctrl_V_V_1_state );

    SC_METHOD(thread_p_Result_1_fu_105_p5);
    sensitive << ( p_Result_s_fu_93_p5 );

    SC_METHOD(thread_p_Result_2_fu_117_p5);
    sensitive << ( p_Result_1_fu_105_p5 );

    SC_METHOD(thread_p_Result_s_fu_93_p5);

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( enc_ctrl_V_V_1_ack_in );
    sensitive << ( enc_ctrl_V_V_1_state );
    sensitive << ( din_words_V_data_V_1_ack_in );
    sensitive << ( din_words_V_data_V_1_state );
    sensitive << ( din_words_V_last_V_1_ack_in );
    sensitive << ( din_words_V_last_V_1_state );
    sensitive << ( dout_words_V_data_V_1_ack_in );
    sensitive << ( dout_words_V_data_V_1_state );
    sensitive << ( dout_words_V_last_V_1_ack_in );
    sensitive << ( dout_words_V_last_V_1_state );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state1_io );
    sensitive << ( ap_block_state2_io );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "01";
    enc_ctrl_V_V_1_sel_rd = SC_LOGIC_0;
    enc_ctrl_V_V_1_sel_wr = SC_LOGIC_0;
    enc_ctrl_V_V_1_state = "00";
    din_words_V_data_V_1_sel_rd = SC_LOGIC_0;
    din_words_V_data_V_1_state = "00";
    din_words_V_last_V_1_sel_rd = SC_LOGIC_0;
    din_words_V_last_V_1_state = "00";
    dout_words_V_data_V_1_sel_rd = SC_LOGIC_0;
    dout_words_V_data_V_1_state = "00";
    dout_words_V_last_V_1_sel_rd = SC_LOGIC_0;
    dout_words_V_last_V_1_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "config_encoder_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, enc_ctrl_V_V_TDATA, "(port)enc_ctrl_V_V_TDATA");
    sc_trace(mVcdFile, enc_ctrl_V_V_TVALID, "(port)enc_ctrl_V_V_TVALID");
    sc_trace(mVcdFile, enc_ctrl_V_V_TREADY, "(port)enc_ctrl_V_V_TREADY");
    sc_trace(mVcdFile, din_words_TDATA, "(port)din_words_TDATA");
    sc_trace(mVcdFile, din_words_TVALID, "(port)din_words_TVALID");
    sc_trace(mVcdFile, din_words_TREADY, "(port)din_words_TREADY");
    sc_trace(mVcdFile, din_words_TLAST, "(port)din_words_TLAST");
    sc_trace(mVcdFile, dout_words_TDATA, "(port)dout_words_TDATA");
    sc_trace(mVcdFile, dout_words_TVALID, "(port)dout_words_TVALID");
    sc_trace(mVcdFile, dout_words_TREADY, "(port)dout_words_TREADY");
    sc_trace(mVcdFile, dout_words_TLAST, "(port)dout_words_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, enc_ctrl_V_V_1_data_out, "enc_ctrl_V_V_1_data_out");
    sc_trace(mVcdFile, enc_ctrl_V_V_1_vld_in, "enc_ctrl_V_V_1_vld_in");
    sc_trace(mVcdFile, enc_ctrl_V_V_1_vld_out, "enc_ctrl_V_V_1_vld_out");
    sc_trace(mVcdFile, enc_ctrl_V_V_1_ack_in, "enc_ctrl_V_V_1_ack_in");
    sc_trace(mVcdFile, enc_ctrl_V_V_1_ack_out, "enc_ctrl_V_V_1_ack_out");
    sc_trace(mVcdFile, enc_ctrl_V_V_1_payload_A, "enc_ctrl_V_V_1_payload_A");
    sc_trace(mVcdFile, enc_ctrl_V_V_1_payload_B, "enc_ctrl_V_V_1_payload_B");
    sc_trace(mVcdFile, enc_ctrl_V_V_1_sel_rd, "enc_ctrl_V_V_1_sel_rd");
    sc_trace(mVcdFile, enc_ctrl_V_V_1_sel_wr, "enc_ctrl_V_V_1_sel_wr");
    sc_trace(mVcdFile, enc_ctrl_V_V_1_sel, "enc_ctrl_V_V_1_sel");
    sc_trace(mVcdFile, enc_ctrl_V_V_1_load_A, "enc_ctrl_V_V_1_load_A");
    sc_trace(mVcdFile, enc_ctrl_V_V_1_load_B, "enc_ctrl_V_V_1_load_B");
    sc_trace(mVcdFile, enc_ctrl_V_V_1_state, "enc_ctrl_V_V_1_state");
    sc_trace(mVcdFile, enc_ctrl_V_V_1_state_cmp_full, "enc_ctrl_V_V_1_state_cmp_full");
    sc_trace(mVcdFile, din_words_V_data_V_1_data_out, "din_words_V_data_V_1_data_out");
    sc_trace(mVcdFile, din_words_V_data_V_1_vld_in, "din_words_V_data_V_1_vld_in");
    sc_trace(mVcdFile, din_words_V_data_V_1_vld_out, "din_words_V_data_V_1_vld_out");
    sc_trace(mVcdFile, din_words_V_data_V_1_ack_in, "din_words_V_data_V_1_ack_in");
    sc_trace(mVcdFile, din_words_V_data_V_1_ack_out, "din_words_V_data_V_1_ack_out");
    sc_trace(mVcdFile, din_words_V_data_V_1_sel_rd, "din_words_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, din_words_V_data_V_1_sel, "din_words_V_data_V_1_sel");
    sc_trace(mVcdFile, din_words_V_data_V_1_state, "din_words_V_data_V_1_state");
    sc_trace(mVcdFile, din_words_V_last_V_1_data_out, "din_words_V_last_V_1_data_out");
    sc_trace(mVcdFile, din_words_V_last_V_1_vld_in, "din_words_V_last_V_1_vld_in");
    sc_trace(mVcdFile, din_words_V_last_V_1_vld_out, "din_words_V_last_V_1_vld_out");
    sc_trace(mVcdFile, din_words_V_last_V_1_ack_in, "din_words_V_last_V_1_ack_in");
    sc_trace(mVcdFile, din_words_V_last_V_1_ack_out, "din_words_V_last_V_1_ack_out");
    sc_trace(mVcdFile, din_words_V_last_V_1_sel_rd, "din_words_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, din_words_V_last_V_1_sel, "din_words_V_last_V_1_sel");
    sc_trace(mVcdFile, din_words_V_last_V_1_state, "din_words_V_last_V_1_state");
    sc_trace(mVcdFile, dout_words_V_data_V_1_data_out, "dout_words_V_data_V_1_data_out");
    sc_trace(mVcdFile, dout_words_V_data_V_1_vld_in, "dout_words_V_data_V_1_vld_in");
    sc_trace(mVcdFile, dout_words_V_data_V_1_vld_out, "dout_words_V_data_V_1_vld_out");
    sc_trace(mVcdFile, dout_words_V_data_V_1_ack_in, "dout_words_V_data_V_1_ack_in");
    sc_trace(mVcdFile, dout_words_V_data_V_1_ack_out, "dout_words_V_data_V_1_ack_out");
    sc_trace(mVcdFile, dout_words_V_data_V_1_sel_rd, "dout_words_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, dout_words_V_data_V_1_sel, "dout_words_V_data_V_1_sel");
    sc_trace(mVcdFile, dout_words_V_data_V_1_state, "dout_words_V_data_V_1_state");
    sc_trace(mVcdFile, dout_words_V_last_V_1_data_out, "dout_words_V_last_V_1_data_out");
    sc_trace(mVcdFile, dout_words_V_last_V_1_vld_in, "dout_words_V_last_V_1_vld_in");
    sc_trace(mVcdFile, dout_words_V_last_V_1_vld_out, "dout_words_V_last_V_1_vld_out");
    sc_trace(mVcdFile, dout_words_V_last_V_1_ack_in, "dout_words_V_last_V_1_ack_in");
    sc_trace(mVcdFile, dout_words_V_last_V_1_ack_out, "dout_words_V_last_V_1_ack_out");
    sc_trace(mVcdFile, dout_words_V_last_V_1_sel_rd, "dout_words_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, dout_words_V_last_V_1_sel, "dout_words_V_last_V_1_sel");
    sc_trace(mVcdFile, dout_words_V_last_V_1_state, "dout_words_V_last_V_1_state");
    sc_trace(mVcdFile, enc_ctrl_V_V_TDATA_blk_n, "enc_ctrl_V_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, din_words_TDATA_blk_n, "din_words_TDATA_blk_n");
    sc_trace(mVcdFile, dout_words_TDATA_blk_n, "dout_words_TDATA_blk_n");
    sc_trace(mVcdFile, p_Result_2_fu_117_p5, "p_Result_2_fu_117_p5");
    sc_trace(mVcdFile, ap_block_state1_io, "ap_block_state1_io");
    sc_trace(mVcdFile, p_Result_s_fu_93_p5, "p_Result_s_fu_93_p5");
    sc_trace(mVcdFile, p_Result_1_fu_105_p5, "p_Result_1_fu_105_p5");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, ap_block_state2_io, "ap_block_state2_io");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("config_encoder.hdltvin.dat");
    mHdltvoutHandle.open("config_encoder.hdltvout.dat");
}

config_encoder::~config_encoder() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void config_encoder::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        din_words_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_vld_out.read()))) {
            din_words_V_data_V_1_sel_rd =  (sc_logic) (~din_words_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        din_words_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, din_words_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, din_words_V_data_V_1_state.read())))) {
            din_words_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, din_words_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, din_words_V_data_V_1_state.read())))) {
            din_words_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, din_words_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, din_words_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, din_words_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_data_V_1_ack_out.read()))))) {
            din_words_V_data_V_1_state = ap_const_lv2_3;
        } else {
            din_words_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        din_words_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_last_V_1_vld_out.read()))) {
            din_words_V_last_V_1_sel_rd =  (sc_logic) (~din_words_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        din_words_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, din_words_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, din_words_V_last_V_1_state.read())))) {
            din_words_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, din_words_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, din_words_V_last_V_1_state.read())))) {
            din_words_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, din_words_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, din_words_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, din_words_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, din_words_V_last_V_1_ack_out.read()))))) {
            din_words_V_last_V_1_state = ap_const_lv2_3;
        } else {
            din_words_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_words_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_vld_out.read()))) {
            dout_words_V_data_V_1_sel_rd =  (sc_logic) (~dout_words_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_words_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dout_words_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dout_words_V_data_V_1_state.read())))) {
            dout_words_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dout_words_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dout_words_V_data_V_1_state.read())))) {
            dout_words_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dout_words_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dout_words_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dout_words_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_data_V_1_ack_out.read()))))) {
            dout_words_V_data_V_1_state = ap_const_lv2_3;
        } else {
            dout_words_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_words_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_last_V_1_vld_out.read()))) {
            dout_words_V_last_V_1_sel_rd =  (sc_logic) (~dout_words_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dout_words_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dout_words_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dout_words_V_last_V_1_state.read())))) {
            dout_words_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dout_words_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dout_words_V_last_V_1_state.read())))) {
            dout_words_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dout_words_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dout_words_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dout_words_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dout_words_V_last_V_1_ack_out.read()))))) {
            dout_words_V_last_V_1_state = ap_const_lv2_3;
        } else {
            dout_words_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        enc_ctrl_V_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, enc_ctrl_V_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, enc_ctrl_V_V_1_vld_out.read()))) {
            enc_ctrl_V_V_1_sel_rd =  (sc_logic) (~enc_ctrl_V_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        enc_ctrl_V_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, enc_ctrl_V_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, enc_ctrl_V_V_1_ack_in.read()))) {
            enc_ctrl_V_V_1_sel_wr =  (sc_logic) (~enc_ctrl_V_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        enc_ctrl_V_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, enc_ctrl_V_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, enc_ctrl_V_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(enc_ctrl_V_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, enc_ctrl_V_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(enc_ctrl_V_V_1_state.read(), ap_const_lv2_2)))) {
            enc_ctrl_V_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, enc_ctrl_V_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, enc_ctrl_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(enc_ctrl_V_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, enc_ctrl_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(enc_ctrl_V_V_1_state.read(), ap_const_lv2_1)))) {
            enc_ctrl_V_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, enc_ctrl_V_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(enc_ctrl_V_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, enc_ctrl_V_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(enc_ctrl_V_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(enc_ctrl_V_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, enc_ctrl_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, enc_ctrl_V_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, enc_ctrl_V_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, enc_ctrl_V_V_1_ack_out.read()))))) {
            enc_ctrl_V_V_1_state = ap_const_lv2_3;
        } else {
            enc_ctrl_V_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, enc_ctrl_V_V_1_load_A.read())) {
        enc_ctrl_V_V_1_payload_A = p_Result_2_fu_117_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, enc_ctrl_V_V_1_load_B.read())) {
        enc_ctrl_V_V_1_payload_B = p_Result_2_fu_117_p5.read();
    }
}

void config_encoder::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void config_encoder::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void config_encoder::thread_ap_block_state1_io() {
    ap_block_state1_io = (esl_seteq<1,1,1>(ap_const_logic_0, enc_ctrl_V_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()));
}

void config_encoder::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(ap_const_logic_0, enc_ctrl_V_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_last_V_1_ack_in.read()));
}

void config_encoder::thread_ap_block_state2_io() {
    ap_block_state2_io = (esl_seteq<1,1,1>(ap_const_logic_0, enc_ctrl_V_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()));
}

void config_encoder::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, enc_ctrl_V_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_last_V_1_state.read()[0]) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, enc_ctrl_V_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void config_encoder::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void config_encoder::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, enc_ctrl_V_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_last_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_state.read()[0]) && 
         esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_last_V_1_state.read()[0]) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, enc_ctrl_V_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void config_encoder::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void config_encoder::thread_din_words_TDATA() {
    din_words_TDATA = din_words_V_data_V_1_data_out.read();
}

void config_encoder::thread_din_words_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        din_words_TDATA_blk_n = din_words_V_data_V_1_state.read()[1];
    } else {
        din_words_TDATA_blk_n = ap_const_logic_1;
    }
}

void config_encoder::thread_din_words_TLAST() {
    din_words_TLAST = din_words_V_last_V_1_data_out.read();
}

void config_encoder::thread_din_words_TVALID() {
    din_words_TVALID = din_words_V_last_V_1_state.read()[0];
}

void config_encoder::thread_din_words_V_data_V_1_ack_in() {
    din_words_V_data_V_1_ack_in = din_words_V_data_V_1_state.read()[1];
}

void config_encoder::thread_din_words_V_data_V_1_ack_out() {
    din_words_V_data_V_1_ack_out = din_words_TREADY.read();
}

void config_encoder::thread_din_words_V_data_V_1_data_out() {
    din_words_V_data_V_1_data_out = ap_const_lv8_4;
}

void config_encoder::thread_din_words_V_data_V_1_sel() {
    din_words_V_data_V_1_sel = din_words_V_data_V_1_sel_rd.read();
}

void config_encoder::thread_din_words_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        din_words_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        din_words_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void config_encoder::thread_din_words_V_data_V_1_vld_out() {
    din_words_V_data_V_1_vld_out = din_words_V_data_V_1_state.read()[0];
}

void config_encoder::thread_din_words_V_last_V_1_ack_in() {
    din_words_V_last_V_1_ack_in = din_words_V_last_V_1_state.read()[1];
}

void config_encoder::thread_din_words_V_last_V_1_ack_out() {
    din_words_V_last_V_1_ack_out = din_words_TREADY.read();
}

void config_encoder::thread_din_words_V_last_V_1_data_out() {
    din_words_V_last_V_1_data_out = ap_const_lv1_1;
}

void config_encoder::thread_din_words_V_last_V_1_sel() {
    din_words_V_last_V_1_sel = din_words_V_last_V_1_sel_rd.read();
}

void config_encoder::thread_din_words_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        din_words_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        din_words_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void config_encoder::thread_din_words_V_last_V_1_vld_out() {
    din_words_V_last_V_1_vld_out = din_words_V_last_V_1_state.read()[0];
}

void config_encoder::thread_dout_words_TDATA() {
    dout_words_TDATA = dout_words_V_data_V_1_data_out.read();
}

void config_encoder::thread_dout_words_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        dout_words_TDATA_blk_n = dout_words_V_data_V_1_state.read()[1];
    } else {
        dout_words_TDATA_blk_n = ap_const_logic_1;
    }
}

void config_encoder::thread_dout_words_TLAST() {
    dout_words_TLAST = dout_words_V_last_V_1_data_out.read();
}

void config_encoder::thread_dout_words_TVALID() {
    dout_words_TVALID = dout_words_V_last_V_1_state.read()[0];
}

void config_encoder::thread_dout_words_V_data_V_1_ack_in() {
    dout_words_V_data_V_1_ack_in = dout_words_V_data_V_1_state.read()[1];
}

void config_encoder::thread_dout_words_V_data_V_1_ack_out() {
    dout_words_V_data_V_1_ack_out = dout_words_TREADY.read();
}

void config_encoder::thread_dout_words_V_data_V_1_data_out() {
    dout_words_V_data_V_1_data_out = ap_const_lv8_10;
}

void config_encoder::thread_dout_words_V_data_V_1_sel() {
    dout_words_V_data_V_1_sel = dout_words_V_data_V_1_sel_rd.read();
}

void config_encoder::thread_dout_words_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        dout_words_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        dout_words_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void config_encoder::thread_dout_words_V_data_V_1_vld_out() {
    dout_words_V_data_V_1_vld_out = dout_words_V_data_V_1_state.read()[0];
}

void config_encoder::thread_dout_words_V_last_V_1_ack_in() {
    dout_words_V_last_V_1_ack_in = dout_words_V_last_V_1_state.read()[1];
}

void config_encoder::thread_dout_words_V_last_V_1_ack_out() {
    dout_words_V_last_V_1_ack_out = dout_words_TREADY.read();
}

void config_encoder::thread_dout_words_V_last_V_1_data_out() {
    dout_words_V_last_V_1_data_out = ap_const_lv1_1;
}

void config_encoder::thread_dout_words_V_last_V_1_sel() {
    dout_words_V_last_V_1_sel = dout_words_V_last_V_1_sel_rd.read();
}

void config_encoder::thread_dout_words_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        dout_words_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        dout_words_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void config_encoder::thread_dout_words_V_last_V_1_vld_out() {
    dout_words_V_last_V_1_vld_out = dout_words_V_last_V_1_state.read()[0];
}

void config_encoder::thread_enc_ctrl_V_V_1_ack_in() {
    enc_ctrl_V_V_1_ack_in = enc_ctrl_V_V_1_state.read()[1];
}

void config_encoder::thread_enc_ctrl_V_V_1_ack_out() {
    enc_ctrl_V_V_1_ack_out = enc_ctrl_V_V_TREADY.read();
}

void config_encoder::thread_enc_ctrl_V_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, enc_ctrl_V_V_1_sel.read())) {
        enc_ctrl_V_V_1_data_out = enc_ctrl_V_V_1_payload_B.read();
    } else {
        enc_ctrl_V_V_1_data_out = enc_ctrl_V_V_1_payload_A.read();
    }
}

void config_encoder::thread_enc_ctrl_V_V_1_load_A() {
    enc_ctrl_V_V_1_load_A = (enc_ctrl_V_V_1_state_cmp_full.read() & ~enc_ctrl_V_V_1_sel_wr.read());
}

void config_encoder::thread_enc_ctrl_V_V_1_load_B() {
    enc_ctrl_V_V_1_load_B = (enc_ctrl_V_V_1_sel_wr.read() & enc_ctrl_V_V_1_state_cmp_full.read());
}

void config_encoder::thread_enc_ctrl_V_V_1_sel() {
    enc_ctrl_V_V_1_sel = enc_ctrl_V_V_1_sel_rd.read();
}

void config_encoder::thread_enc_ctrl_V_V_1_state_cmp_full() {
    enc_ctrl_V_V_1_state_cmp_full =  (sc_logic) ((!enc_ctrl_V_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(enc_ctrl_V_V_1_state.read() != ap_const_lv2_1))[0];
}

void config_encoder::thread_enc_ctrl_V_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
        enc_ctrl_V_V_1_vld_in = ap_const_logic_1;
    } else {
        enc_ctrl_V_V_1_vld_in = ap_const_logic_0;
    }
}

void config_encoder::thread_enc_ctrl_V_V_1_vld_out() {
    enc_ctrl_V_V_1_vld_out = enc_ctrl_V_V_1_state.read()[0];
}

void config_encoder::thread_enc_ctrl_V_V_TDATA() {
    enc_ctrl_V_V_TDATA = enc_ctrl_V_V_1_data_out.read();
}

void config_encoder::thread_enc_ctrl_V_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        enc_ctrl_V_V_TDATA_blk_n = enc_ctrl_V_V_1_state.read()[1];
    } else {
        enc_ctrl_V_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void config_encoder::thread_enc_ctrl_V_V_TVALID() {
    enc_ctrl_V_V_TVALID = enc_ctrl_V_V_1_state.read()[0];
}

void config_encoder::thread_p_Result_1_fu_105_p5() {
    p_Result_1_fu_105_p5 = esl_partset<32,32,16,32,32>(p_Result_s_fu_93_p5.read(), ap_const_lv16_0, ap_const_lv32_8, ap_const_lv32_17);
}

void config_encoder::thread_p_Result_2_fu_117_p5() {
    p_Result_2_fu_117_p5 = esl_partset<32,32,7,32,32>(p_Result_1_fu_105_p5.read(), ap_const_lv7_0, ap_const_lv32_0, ap_const_lv32_6);
}

void config_encoder::thread_p_Result_s_fu_93_p5() {
    p_Result_s_fu_93_p5 = esl_partset<32,32,8,32,32>(ap_const_lv32_0, ap_const_lv8_0, ap_const_lv32_18, ap_const_lv32_1F);
}

void config_encoder::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state1_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, enc_ctrl_V_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_last_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_state.read()[0]) && esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_last_V_1_state.read()[0]) && !(esl_seteq<1,1,1>(ap_const_logic_0, enc_ctrl_V_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, din_words_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dout_words_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state2_io.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

void config_encoder::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"enc_ctrl_V_V_TDATA\" :  \"" << enc_ctrl_V_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"enc_ctrl_V_V_TVALID\" :  \"" << enc_ctrl_V_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"enc_ctrl_V_V_TREADY\" :  \"" << enc_ctrl_V_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"din_words_TDATA\" :  \"" << din_words_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"din_words_TVALID\" :  \"" << din_words_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"din_words_TREADY\" :  \"" << din_words_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"din_words_TLAST\" :  \"" << din_words_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_words_TDATA\" :  \"" << dout_words_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_words_TVALID\" :  \"" << dout_words_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dout_words_TREADY\" :  \"" << dout_words_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_words_TLAST\" :  \"" << dout_words_TLAST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

