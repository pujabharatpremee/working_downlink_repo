// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="bpsk_modulation,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu21dr-ffvd1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.774000,HLS_SYN_LAT=8,HLS_SYN_TPT=8,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=721,HLS_SYN_LUT=2055,HLS_VERSION=2018_3}" *)

module bpsk_modulation (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        demod_data_TREADY,
        mod_data_TDATA,
        mod_data_TVALID,
        mod_data_TREADY,
        mod_data_TLAST,
        demod_data_TDATA,
        demod_data_TVALID,
        demod_data_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 8'd1;
parameter    ap_ST_fsm_pp0_stage1 = 8'd2;
parameter    ap_ST_fsm_pp0_stage2 = 8'd4;
parameter    ap_ST_fsm_pp0_stage3 = 8'd8;
parameter    ap_ST_fsm_pp0_stage4 = 8'd16;
parameter    ap_ST_fsm_pp0_stage5 = 8'd32;
parameter    ap_ST_fsm_pp0_stage6 = 8'd64;
parameter    ap_ST_fsm_pp0_stage7 = 8'd128;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   demod_data_TREADY;
input  [127:0] mod_data_TDATA;
input   mod_data_TVALID;
output   mod_data_TREADY;
input  [0:0] mod_data_TLAST;
output  [127:0] demod_data_TDATA;
output   demod_data_TVALID;
output  [0:0] demod_data_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    demod_data_V_data_V_1_ack_in;
reg    ap_block_pp0_stage7_11001;
reg   [127:0] mod_data_V_data_V_0_data_out;
wire    mod_data_V_data_V_0_vld_in;
wire    mod_data_V_data_V_0_vld_out;
wire    mod_data_V_data_V_0_ack_in;
reg    mod_data_V_data_V_0_ack_out;
reg   [127:0] mod_data_V_data_V_0_payload_A;
reg   [127:0] mod_data_V_data_V_0_payload_B;
reg    mod_data_V_data_V_0_sel_rd;
reg    mod_data_V_data_V_0_sel_wr;
wire    mod_data_V_data_V_0_sel;
wire    mod_data_V_data_V_0_load_A;
wire    mod_data_V_data_V_0_load_B;
reg   [1:0] mod_data_V_data_V_0_state;
wire    mod_data_V_data_V_0_state_cmp_full;
wire    mod_data_V_last_V_0_vld_in;
reg    mod_data_V_last_V_0_ack_out;
reg   [1:0] mod_data_V_last_V_0_state;
reg   [127:0] demod_data_V_data_V_1_data_in;
reg   [127:0] demod_data_V_data_V_1_data_out;
reg    demod_data_V_data_V_1_vld_in;
wire    demod_data_V_data_V_1_vld_out;
wire    demod_data_V_data_V_1_ack_out;
reg   [127:0] demod_data_V_data_V_1_payload_A;
reg   [127:0] demod_data_V_data_V_1_payload_B;
reg    demod_data_V_data_V_1_sel_rd;
reg    demod_data_V_data_V_1_sel_wr;
wire    demod_data_V_data_V_1_sel;
wire    demod_data_V_data_V_1_load_A;
wire    demod_data_V_data_V_1_load_B;
reg   [1:0] demod_data_V_data_V_1_state;
wire    demod_data_V_data_V_1_state_cmp_full;
reg   [0:0] demod_data_V_last_V_1_data_in;
reg   [0:0] demod_data_V_last_V_1_data_out;
reg    demod_data_V_last_V_1_vld_in;
wire    demod_data_V_last_V_1_vld_out;
wire    demod_data_V_last_V_1_ack_in;
wire    demod_data_V_last_V_1_ack_out;
reg   [0:0] demod_data_V_last_V_1_payload_A;
reg   [0:0] demod_data_V_last_V_1_payload_B;
reg    demod_data_V_last_V_1_sel_rd;
reg    demod_data_V_last_V_1_sel_wr;
wire    demod_data_V_last_V_1_sel;
wire    demod_data_V_last_V_1_load_A;
wire    demod_data_V_last_V_1_load_B;
reg   [1:0] demod_data_V_last_V_1_state;
wire    demod_data_V_last_V_1_state_cmp_full;
reg   [31:0] demod_axi_trx;
reg    mod_data_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    demod_data_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
reg   [0:0] tmp_17_reg_2715;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_18_reg_2720;
reg   [0:0] tmp_19_reg_2725;
reg   [0:0] tmp_20_reg_2730;
reg   [0:0] tmp_21_reg_2735;
reg   [0:0] tmp_22_reg_2740;
reg   [0:0] tmp_23_reg_2745;
reg   [0:0] tmp_24_reg_2750;
reg   [0:0] tmp_25_reg_2755;
reg   [0:0] tmp_26_reg_2760;
reg   [0:0] tmp_27_reg_2765;
reg   [0:0] tmp_28_reg_2770;
reg   [0:0] tmp_29_reg_2775;
reg   [0:0] tmp_30_reg_2780;
reg   [0:0] tmp_31_reg_2785;
reg   [0:0] tmp_32_reg_2790;
reg   [0:0] tmp_33_reg_2795;
reg   [0:0] tmp_34_reg_2800;
reg   [0:0] tmp_35_reg_2805;
reg   [0:0] tmp_36_reg_2810;
reg   [0:0] tmp_37_reg_2815;
reg   [0:0] tmp_38_reg_2820;
reg   [0:0] tmp_39_reg_2825;
reg   [0:0] tmp_40_reg_2830;
reg   [0:0] tmp_41_reg_2835;
reg   [0:0] tmp_42_reg_2840;
reg   [0:0] tmp_43_reg_2845;
reg   [0:0] tmp_44_reg_2850;
reg   [0:0] tmp_45_reg_2855;
reg   [0:0] tmp_46_reg_2860;
reg   [0:0] tmp_47_reg_2865;
reg   [0:0] tmp_48_reg_2870;
reg   [0:0] tmp_49_reg_2875;
reg   [0:0] tmp_50_reg_2880;
reg   [0:0] tmp_51_reg_2885;
reg   [0:0] tmp_52_reg_2890;
reg   [0:0] tmp_53_reg_2895;
reg   [0:0] tmp_54_reg_2900;
reg   [0:0] tmp_55_reg_2905;
reg   [0:0] tmp_56_reg_2910;
reg   [0:0] tmp_57_reg_2915;
reg   [0:0] tmp_58_reg_2920;
reg   [0:0] tmp_59_reg_2925;
reg   [0:0] tmp_60_reg_2930;
reg   [0:0] tmp_61_reg_2935;
reg   [0:0] tmp_62_reg_2940;
reg   [0:0] tmp_63_reg_2945;
reg   [0:0] tmp_64_reg_2950;
reg   [0:0] tmp_65_reg_2955;
reg   [0:0] tmp_66_reg_2960;
reg   [0:0] tmp_67_reg_2965;
reg   [0:0] tmp_68_reg_2970;
reg   [0:0] tmp_69_reg_2975;
reg   [0:0] tmp_70_reg_2980;
reg   [0:0] tmp_71_reg_2985;
reg   [0:0] tmp_72_reg_2990;
reg   [0:0] tmp_73_reg_2995;
reg   [0:0] tmp_74_reg_3000;
reg   [0:0] tmp_75_reg_3005;
reg   [0:0] tmp_76_reg_3010;
reg   [0:0] tmp_77_reg_3015;
reg   [0:0] tmp_78_reg_3020;
reg   [0:0] tmp_79_reg_3025;
reg   [0:0] tmp_80_reg_3030;
reg   [0:0] tmp_81_reg_3035;
reg   [0:0] tmp_82_reg_3040;
reg   [0:0] tmp_83_reg_3045;
reg   [0:0] tmp_84_reg_3050;
reg   [0:0] tmp_85_reg_3055;
reg   [0:0] tmp_86_reg_3060;
reg   [0:0] tmp_87_reg_3065;
reg   [0:0] tmp_88_reg_3070;
reg   [0:0] tmp_89_reg_3075;
reg   [0:0] tmp_90_reg_3080;
reg   [0:0] tmp_91_reg_3085;
reg   [0:0] tmp_92_reg_3090;
reg   [0:0] tmp_93_reg_3095;
reg   [0:0] tmp_94_reg_3100;
reg   [0:0] tmp_95_reg_3105;
reg   [0:0] tmp_96_reg_3110;
reg   [0:0] tmp_97_reg_3115;
reg   [0:0] tmp_98_reg_3120;
reg   [0:0] tmp_99_reg_3125;
reg   [0:0] tmp_100_reg_3130;
reg   [0:0] tmp_101_reg_3135;
reg   [0:0] tmp_102_reg_3140;
reg   [0:0] tmp_103_reg_3145;
reg   [0:0] tmp_104_reg_3150;
reg   [0:0] tmp_105_reg_3155;
reg   [0:0] tmp_106_reg_3160;
reg   [0:0] tmp_107_reg_3165;
reg   [0:0] tmp_108_reg_3170;
reg   [0:0] tmp_109_reg_3175;
reg   [0:0] tmp_110_reg_3180;
reg   [0:0] tmp_111_reg_3185;
reg   [0:0] tmp_112_reg_3190;
reg   [0:0] tmp_113_reg_3195;
reg   [0:0] tmp_114_reg_3200;
reg   [0:0] tmp_115_reg_3205;
reg   [0:0] tmp_116_reg_3210;
reg   [0:0] tmp_117_reg_3215;
reg   [0:0] tmp_118_reg_3220;
reg   [0:0] tmp_119_reg_3225;
reg   [0:0] tmp_120_reg_3230;
reg   [0:0] tmp_121_reg_3235;
reg   [0:0] tmp_122_reg_3240;
reg   [0:0] tmp_123_reg_3245;
reg   [0:0] tmp_124_reg_3250;
reg   [0:0] tmp_125_reg_3255;
reg   [0:0] tmp_126_reg_3260;
reg   [0:0] tmp_127_reg_3265;
reg   [0:0] tmp_128_reg_3270;
wire   [127:0] tmp_data_V_fu_1466_p17;
wire   [0:0] tmp_last_V_fu_1507_p2;
wire   [0:0] tmp_last_V_1_fu_1528_p2;
reg   [0:0] tmp_last_V_1_reg_3285;
wire   [0:0] tmp_last_V_2_fu_1548_p2;
reg   [0:0] tmp_last_V_2_reg_3290;
wire   [31:0] tmp_38_1_op_fu_1554_p2;
reg   [31:0] tmp_38_1_op_reg_3296;
wire   [127:0] tmp_data_V_1_fu_1672_p17;
wire    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
wire   [0:0] tmp_last_V_3_fu_1715_p2;
reg   [0:0] tmp_last_V_3_reg_3306;
wire   [0:0] tmp_last_V_4_fu_1735_p2;
reg   [0:0] tmp_last_V_4_reg_3311;
wire   [0:0] tmp_last_V_5_fu_1755_p2;
reg   [0:0] tmp_last_V_5_reg_3316;
wire   [0:0] tmp_last_V_6_fu_1775_p2;
reg   [0:0] tmp_last_V_6_reg_3321;
wire   [0:0] tmp_last_V_7_fu_1795_p2;
reg   [0:0] tmp_last_V_7_reg_3326;
wire   [127:0] tmp_data_V_2_fu_1933_p17;
wire    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
wire   [127:0] tmp_data_V_3_fu_2082_p17;
wire    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
wire   [127:0] tmp_data_V_4_fu_2231_p17;
wire    ap_block_state5_pp0_stage4_iter0;
reg    ap_block_pp0_stage4_11001;
wire   [127:0] tmp_data_V_5_fu_2380_p17;
wire    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_pp0_stage5_11001;
wire   [127:0] tmp_data_V_6_fu_2529_p17;
wire    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
wire   [127:0] tmp_data_V_7_fu_2678_p17;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage7_subdone;
wire   [31:0] tmp_38_7_fu_1807_p3;
reg    ap_block_pp0_stage0_01001;
wire    ap_block_pp0_stage1_01001;
wire    ap_block_pp0_stage2_01001;
wire    ap_block_pp0_stage3_01001;
wire    ap_block_pp0_stage4_01001;
wire    ap_block_pp0_stage5_01001;
wire    ap_block_pp0_stage6_01001;
wire    ap_block_pp0_stage7_01001;
wire   [0:0] tmp_fu_318_p1;
wire   [0:0] tmp_1_fu_330_p3;
wire   [0:0] tmp_3_fu_346_p3;
wire   [0:0] tmp_4_fu_362_p3;
wire   [0:0] tmp_5_fu_378_p3;
wire   [0:0] tmp_6_fu_394_p3;
wire   [0:0] tmp_7_fu_410_p3;
wire   [0:0] tmp_8_fu_426_p3;
wire   [0:0] tmp_9_fu_442_p3;
wire   [0:0] tmp_10_fu_458_p3;
wire   [0:0] tmp_11_fu_474_p3;
wire   [0:0] tmp_12_fu_490_p3;
wire   [0:0] tmp_13_fu_506_p3;
wire   [0:0] tmp_14_fu_522_p3;
wire   [0:0] tmp_15_fu_538_p3;
wire   [0:0] tmp_16_fu_554_p3;
wire   [7:0] storemerge_13_fu_562_p3;
wire   [7:0] storemerge_12_fu_546_p3;
wire   [7:0] storemerge_11_fu_530_p3;
wire   [7:0] storemerge_10_fu_514_p3;
wire   [7:0] storemerge_7_fu_498_p3;
wire   [7:0] storemerge_s_fu_482_p3;
wire   [7:0] storemerge_9_fu_466_p3;
wire   [7:0] storemerge_8_fu_450_p3;
wire   [7:0] tmp_2_fu_434_p3;
wire   [7:0] storemerge_6_fu_418_p3;
wire   [7:0] storemerge_5_fu_402_p3;
wire   [7:0] storemerge_4_fu_386_p3;
wire   [7:0] storemerge_3_fu_370_p3;
wire   [7:0] storemerge_2_fu_354_p3;
wire   [7:0] storemerge_1_fu_338_p3;
wire   [7:0] storemerge_fu_322_p3;
wire   [31:0] demod_axi_trx_load_o_fu_1514_p2;
wire   [31:0] tmp_s_fu_1520_p3;
wire   [31:0] tmp_38_op_fu_1534_p2;
wire   [31:0] tmp_38_1_fu_1540_p3;
wire   [7:0] storemerge_29_fu_1665_p3;
wire   [7:0] storemerge_28_fu_1658_p3;
wire   [7:0] storemerge_27_fu_1651_p3;
wire   [7:0] storemerge_26_fu_1644_p3;
wire   [7:0] storemerge_25_fu_1637_p3;
wire   [7:0] storemerge_24_fu_1630_p3;
wire   [7:0] storemerge_23_fu_1623_p3;
wire   [7:0] storemerge_22_fu_1616_p3;
wire   [7:0] storemerge_21_fu_1609_p3;
wire   [7:0] storemerge_20_fu_1602_p3;
wire   [7:0] storemerge_19_fu_1595_p3;
wire   [7:0] storemerge_18_fu_1588_p3;
wire   [7:0] storemerge_17_fu_1581_p3;
wire   [7:0] storemerge_16_fu_1574_p3;
wire   [7:0] storemerge_15_fu_1567_p3;
wire   [7:0] storemerge_14_fu_1560_p3;
wire   [31:0] tmp_38_2_fu_1709_p3;
wire   [31:0] tmp_38_2_op_fu_1721_p2;
wire   [31:0] tmp_38_3_fu_1727_p3;
wire   [31:0] tmp_38_3_op_fu_1741_p2;
wire   [31:0] tmp_38_4_fu_1747_p3;
wire   [31:0] tmp_38_4_op_fu_1761_p2;
wire   [31:0] tmp_38_5_fu_1767_p3;
wire   [31:0] tmp_38_5_op_fu_1781_p2;
wire   [31:0] tmp_38_6_fu_1787_p3;
wire   [31:0] tmp_38_6_op_fu_1801_p2;
wire   [7:0] storemerge_45_fu_1926_p3;
wire   [7:0] storemerge_44_fu_1919_p3;
wire   [7:0] storemerge_43_fu_1912_p3;
wire   [7:0] storemerge_42_fu_1905_p3;
wire   [7:0] storemerge_41_fu_1898_p3;
wire   [7:0] storemerge_40_fu_1891_p3;
wire   [7:0] storemerge_39_fu_1884_p3;
wire   [7:0] storemerge_38_fu_1877_p3;
wire   [7:0] storemerge_37_fu_1870_p3;
wire   [7:0] storemerge_36_fu_1863_p3;
wire   [7:0] storemerge_35_fu_1856_p3;
wire   [7:0] storemerge_34_fu_1849_p3;
wire   [7:0] storemerge_33_fu_1842_p3;
wire   [7:0] storemerge_32_fu_1835_p3;
wire   [7:0] storemerge_31_fu_1828_p3;
wire   [7:0] storemerge_30_fu_1821_p3;
wire   [7:0] storemerge_61_fu_2075_p3;
wire   [7:0] storemerge_60_fu_2068_p3;
wire   [7:0] storemerge_59_fu_2061_p3;
wire   [7:0] storemerge_58_fu_2054_p3;
wire   [7:0] storemerge_57_fu_2047_p3;
wire   [7:0] storemerge_56_fu_2040_p3;
wire   [7:0] storemerge_55_fu_2033_p3;
wire   [7:0] storemerge_54_fu_2026_p3;
wire   [7:0] storemerge_53_fu_2019_p3;
wire   [7:0] storemerge_52_fu_2012_p3;
wire   [7:0] storemerge_51_fu_2005_p3;
wire   [7:0] storemerge_50_fu_1998_p3;
wire   [7:0] storemerge_49_fu_1991_p3;
wire   [7:0] storemerge_48_fu_1984_p3;
wire   [7:0] storemerge_47_fu_1977_p3;
wire   [7:0] storemerge_46_fu_1970_p3;
wire   [7:0] storemerge_77_fu_2224_p3;
wire   [7:0] storemerge_76_fu_2217_p3;
wire   [7:0] storemerge_75_fu_2210_p3;
wire   [7:0] storemerge_74_fu_2203_p3;
wire   [7:0] storemerge_73_fu_2196_p3;
wire   [7:0] storemerge_72_fu_2189_p3;
wire   [7:0] storemerge_71_fu_2182_p3;
wire   [7:0] storemerge_70_fu_2175_p3;
wire   [7:0] storemerge_69_fu_2168_p3;
wire   [7:0] storemerge_68_fu_2161_p3;
wire   [7:0] storemerge_67_fu_2154_p3;
wire   [7:0] storemerge_66_fu_2147_p3;
wire   [7:0] storemerge_65_fu_2140_p3;
wire   [7:0] storemerge_64_fu_2133_p3;
wire   [7:0] storemerge_63_fu_2126_p3;
wire   [7:0] storemerge_62_fu_2119_p3;
wire   [7:0] storemerge_93_fu_2373_p3;
wire   [7:0] storemerge_92_fu_2366_p3;
wire   [7:0] storemerge_91_fu_2359_p3;
wire   [7:0] storemerge_90_fu_2352_p3;
wire   [7:0] storemerge_89_fu_2345_p3;
wire   [7:0] storemerge_88_fu_2338_p3;
wire   [7:0] storemerge_87_fu_2331_p3;
wire   [7:0] storemerge_86_fu_2324_p3;
wire   [7:0] storemerge_85_fu_2317_p3;
wire   [7:0] storemerge_84_fu_2310_p3;
wire   [7:0] storemerge_83_fu_2303_p3;
wire   [7:0] storemerge_82_fu_2296_p3;
wire   [7:0] storemerge_81_fu_2289_p3;
wire   [7:0] storemerge_80_fu_2282_p3;
wire   [7:0] storemerge_79_fu_2275_p3;
wire   [7:0] storemerge_78_fu_2268_p3;
wire   [7:0] storemerge_109_fu_2522_p3;
wire   [7:0] storemerge_108_fu_2515_p3;
wire   [7:0] storemerge_107_fu_2508_p3;
wire   [7:0] storemerge_106_fu_2501_p3;
wire   [7:0] storemerge_105_fu_2494_p3;
wire   [7:0] storemerge_104_fu_2487_p3;
wire   [7:0] storemerge_103_fu_2480_p3;
wire   [7:0] storemerge_102_fu_2473_p3;
wire   [7:0] storemerge_101_fu_2466_p3;
wire   [7:0] storemerge_100_fu_2459_p3;
wire   [7:0] storemerge_99_fu_2452_p3;
wire   [7:0] storemerge_98_fu_2445_p3;
wire   [7:0] storemerge_97_fu_2438_p3;
wire   [7:0] storemerge_96_fu_2431_p3;
wire   [7:0] storemerge_95_fu_2424_p3;
wire   [7:0] storemerge_94_fu_2417_p3;
wire   [7:0] storemerge_125_fu_2671_p3;
wire   [7:0] storemerge_124_fu_2664_p3;
wire   [7:0] storemerge_123_fu_2657_p3;
wire   [7:0] storemerge_122_fu_2650_p3;
wire   [7:0] storemerge_121_fu_2643_p3;
wire   [7:0] storemerge_120_fu_2636_p3;
wire   [7:0] storemerge_119_fu_2629_p3;
wire   [7:0] storemerge_118_fu_2622_p3;
wire   [7:0] storemerge_117_fu_2615_p3;
wire   [7:0] storemerge_116_fu_2608_p3;
wire   [7:0] storemerge_115_fu_2601_p3;
wire   [7:0] storemerge_114_fu_2594_p3;
wire   [7:0] storemerge_113_fu_2587_p3;
wire   [7:0] storemerge_112_fu_2580_p3;
wire   [7:0] storemerge_111_fu_2573_p3;
wire   [7:0] storemerge_110_fu_2566_p3;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 mod_data_V_data_V_0_sel_rd = 1'b0;
#0 mod_data_V_data_V_0_sel_wr = 1'b0;
#0 mod_data_V_data_V_0_state = 2'd0;
#0 mod_data_V_last_V_0_state = 2'd0;
#0 demod_data_V_data_V_1_sel_rd = 1'b0;
#0 demod_data_V_data_V_1_sel_wr = 1'b0;
#0 demod_data_V_data_V_1_state = 2'd0;
#0 demod_data_V_last_V_1_sel_rd = 1'b0;
#0 demod_data_V_last_V_1_sel_wr = 1'b0;
#0 demod_data_V_last_V_1_state = 2'd0;
#0 demod_axi_trx = 32'd1;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        demod_data_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((demod_data_V_data_V_1_ack_out == 1'b1) & (demod_data_V_data_V_1_vld_out == 1'b1))) begin
            demod_data_V_data_V_1_sel_rd <= ~demod_data_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        demod_data_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((demod_data_V_data_V_1_ack_in == 1'b1) & (demod_data_V_data_V_1_vld_in == 1'b1))) begin
            demod_data_V_data_V_1_sel_wr <= ~demod_data_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        demod_data_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((demod_data_V_data_V_1_state == 2'd2) & (demod_data_V_data_V_1_vld_in == 1'b0)) | ((demod_data_V_data_V_1_state == 2'd3) & (demod_data_V_data_V_1_vld_in == 1'b0) & (demod_data_V_data_V_1_ack_out == 1'b1)))) begin
            demod_data_V_data_V_1_state <= 2'd2;
        end else if ((((demod_data_V_data_V_1_state == 2'd1) & (demod_data_V_data_V_1_ack_out == 1'b0)) | ((demod_data_V_data_V_1_state == 2'd3) & (demod_data_V_data_V_1_ack_out == 1'b0) & (demod_data_V_data_V_1_vld_in == 1'b1)))) begin
            demod_data_V_data_V_1_state <= 2'd1;
        end else if (((~((demod_data_V_data_V_1_vld_in == 1'b0) & (demod_data_V_data_V_1_ack_out == 1'b1)) & ~((demod_data_V_data_V_1_ack_out == 1'b0) & (demod_data_V_data_V_1_vld_in == 1'b1)) & (demod_data_V_data_V_1_state == 2'd3)) | ((demod_data_V_data_V_1_state == 2'd1) & (demod_data_V_data_V_1_ack_out == 1'b1)) | ((demod_data_V_data_V_1_state == 2'd2) & (demod_data_V_data_V_1_vld_in == 1'b1)))) begin
            demod_data_V_data_V_1_state <= 2'd3;
        end else begin
            demod_data_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        demod_data_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((demod_data_V_last_V_1_ack_out == 1'b1) & (demod_data_V_last_V_1_vld_out == 1'b1))) begin
            demod_data_V_last_V_1_sel_rd <= ~demod_data_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        demod_data_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((demod_data_V_last_V_1_ack_in == 1'b1) & (demod_data_V_last_V_1_vld_in == 1'b1))) begin
            demod_data_V_last_V_1_sel_wr <= ~demod_data_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        demod_data_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((demod_data_V_last_V_1_state == 2'd2) & (demod_data_V_last_V_1_vld_in == 1'b0)) | ((demod_data_V_last_V_1_state == 2'd3) & (demod_data_V_last_V_1_vld_in == 1'b0) & (demod_data_V_last_V_1_ack_out == 1'b1)))) begin
            demod_data_V_last_V_1_state <= 2'd2;
        end else if ((((demod_data_V_last_V_1_state == 2'd1) & (demod_data_V_last_V_1_ack_out == 1'b0)) | ((demod_data_V_last_V_1_state == 2'd3) & (demod_data_V_last_V_1_ack_out == 1'b0) & (demod_data_V_last_V_1_vld_in == 1'b1)))) begin
            demod_data_V_last_V_1_state <= 2'd1;
        end else if (((~((demod_data_V_last_V_1_vld_in == 1'b0) & (demod_data_V_last_V_1_ack_out == 1'b1)) & ~((demod_data_V_last_V_1_ack_out == 1'b0) & (demod_data_V_last_V_1_vld_in == 1'b1)) & (demod_data_V_last_V_1_state == 2'd3)) | ((demod_data_V_last_V_1_state == 2'd1) & (demod_data_V_last_V_1_ack_out == 1'b1)) | ((demod_data_V_last_V_1_state == 2'd2) & (demod_data_V_last_V_1_vld_in == 1'b1)))) begin
            demod_data_V_last_V_1_state <= 2'd3;
        end else begin
            demod_data_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mod_data_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((mod_data_V_data_V_0_ack_out == 1'b1) & (mod_data_V_data_V_0_vld_out == 1'b1))) begin
            mod_data_V_data_V_0_sel_rd <= ~mod_data_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mod_data_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((mod_data_V_data_V_0_ack_in == 1'b1) & (mod_data_V_data_V_0_vld_in == 1'b1))) begin
            mod_data_V_data_V_0_sel_wr <= ~mod_data_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mod_data_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((mod_data_V_data_V_0_state == 2'd2) & (mod_data_V_data_V_0_vld_in == 1'b0)) | ((mod_data_V_data_V_0_state == 2'd3) & (mod_data_V_data_V_0_vld_in == 1'b0) & (mod_data_V_data_V_0_ack_out == 1'b1)))) begin
            mod_data_V_data_V_0_state <= 2'd2;
        end else if ((((mod_data_V_data_V_0_state == 2'd1) & (mod_data_V_data_V_0_ack_out == 1'b0)) | ((mod_data_V_data_V_0_state == 2'd3) & (mod_data_V_data_V_0_ack_out == 1'b0) & (mod_data_V_data_V_0_vld_in == 1'b1)))) begin
            mod_data_V_data_V_0_state <= 2'd1;
        end else if (((~((mod_data_V_data_V_0_vld_in == 1'b0) & (mod_data_V_data_V_0_ack_out == 1'b1)) & ~((mod_data_V_data_V_0_ack_out == 1'b0) & (mod_data_V_data_V_0_vld_in == 1'b1)) & (mod_data_V_data_V_0_state == 2'd3)) | ((mod_data_V_data_V_0_state == 2'd1) & (mod_data_V_data_V_0_ack_out == 1'b1)) | ((mod_data_V_data_V_0_state == 2'd2) & (mod_data_V_data_V_0_vld_in == 1'b1)))) begin
            mod_data_V_data_V_0_state <= 2'd3;
        end else begin
            mod_data_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mod_data_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((mod_data_V_last_V_0_state == 2'd2) & (mod_data_V_last_V_0_vld_in == 1'b0)) | ((mod_data_V_last_V_0_state == 2'd3) & (mod_data_V_last_V_0_vld_in == 1'b0) & (mod_data_V_last_V_0_ack_out == 1'b1)))) begin
            mod_data_V_last_V_0_state <= 2'd2;
        end else if ((((mod_data_V_last_V_0_state == 2'd1) & (mod_data_V_last_V_0_ack_out == 1'b0)) | ((mod_data_V_last_V_0_state == 2'd3) & (mod_data_V_last_V_0_ack_out == 1'b0) & (mod_data_V_last_V_0_vld_in == 1'b1)))) begin
            mod_data_V_last_V_0_state <= 2'd1;
        end else if (((~((mod_data_V_last_V_0_vld_in == 1'b0) & (mod_data_V_last_V_0_ack_out == 1'b1)) & ~((mod_data_V_last_V_0_ack_out == 1'b0) & (mod_data_V_last_V_0_vld_in == 1'b1)) & (mod_data_V_last_V_0_state == 2'd3)) | ((mod_data_V_last_V_0_state == 2'd1) & (mod_data_V_last_V_0_ack_out == 1'b1)) | ((mod_data_V_last_V_0_state == 2'd2) & (mod_data_V_last_V_0_vld_in == 1'b1)))) begin
            mod_data_V_last_V_0_state <= 2'd3;
        end else begin
            mod_data_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        demod_axi_trx <= tmp_38_7_fu_1807_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((demod_data_V_data_V_1_load_A == 1'b1)) begin
        demod_data_V_data_V_1_payload_A <= demod_data_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((demod_data_V_data_V_1_load_B == 1'b1)) begin
        demod_data_V_data_V_1_payload_B <= demod_data_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((demod_data_V_last_V_1_load_A == 1'b1)) begin
        demod_data_V_last_V_1_payload_A <= demod_data_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((demod_data_V_last_V_1_load_B == 1'b1)) begin
        demod_data_V_last_V_1_payload_B <= demod_data_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((mod_data_V_data_V_0_load_A == 1'b1)) begin
        mod_data_V_data_V_0_payload_A <= mod_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((mod_data_V_data_V_0_load_B == 1'b1)) begin
        mod_data_V_data_V_0_payload_B <= mod_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_100_reg_3130 <= mod_data_V_data_V_0_data_out[32'd99];
        tmp_101_reg_3135 <= mod_data_V_data_V_0_data_out[32'd100];
        tmp_102_reg_3140 <= mod_data_V_data_V_0_data_out[32'd101];
        tmp_103_reg_3145 <= mod_data_V_data_V_0_data_out[32'd102];
        tmp_104_reg_3150 <= mod_data_V_data_V_0_data_out[32'd103];
        tmp_105_reg_3155 <= mod_data_V_data_V_0_data_out[32'd104];
        tmp_106_reg_3160 <= mod_data_V_data_V_0_data_out[32'd105];
        tmp_107_reg_3165 <= mod_data_V_data_V_0_data_out[32'd106];
        tmp_108_reg_3170 <= mod_data_V_data_V_0_data_out[32'd107];
        tmp_109_reg_3175 <= mod_data_V_data_V_0_data_out[32'd108];
        tmp_110_reg_3180 <= mod_data_V_data_V_0_data_out[32'd109];
        tmp_111_reg_3185 <= mod_data_V_data_V_0_data_out[32'd110];
        tmp_112_reg_3190 <= mod_data_V_data_V_0_data_out[32'd111];
        tmp_113_reg_3195 <= mod_data_V_data_V_0_data_out[32'd112];
        tmp_114_reg_3200 <= mod_data_V_data_V_0_data_out[32'd113];
        tmp_115_reg_3205 <= mod_data_V_data_V_0_data_out[32'd114];
        tmp_116_reg_3210 <= mod_data_V_data_V_0_data_out[32'd115];
        tmp_117_reg_3215 <= mod_data_V_data_V_0_data_out[32'd116];
        tmp_118_reg_3220 <= mod_data_V_data_V_0_data_out[32'd117];
        tmp_119_reg_3225 <= mod_data_V_data_V_0_data_out[32'd118];
        tmp_120_reg_3230 <= mod_data_V_data_V_0_data_out[32'd119];
        tmp_121_reg_3235 <= mod_data_V_data_V_0_data_out[32'd120];
        tmp_122_reg_3240 <= mod_data_V_data_V_0_data_out[32'd121];
        tmp_123_reg_3245 <= mod_data_V_data_V_0_data_out[32'd122];
        tmp_124_reg_3250 <= mod_data_V_data_V_0_data_out[32'd123];
        tmp_125_reg_3255 <= mod_data_V_data_V_0_data_out[32'd124];
        tmp_126_reg_3260 <= mod_data_V_data_V_0_data_out[32'd125];
        tmp_127_reg_3265 <= mod_data_V_data_V_0_data_out[32'd126];
        tmp_128_reg_3270 <= mod_data_V_data_V_0_data_out[32'd127];
        tmp_17_reg_2715 <= mod_data_V_data_V_0_data_out[32'd16];
        tmp_18_reg_2720 <= mod_data_V_data_V_0_data_out[32'd17];
        tmp_19_reg_2725 <= mod_data_V_data_V_0_data_out[32'd18];
        tmp_20_reg_2730 <= mod_data_V_data_V_0_data_out[32'd19];
        tmp_21_reg_2735 <= mod_data_V_data_V_0_data_out[32'd20];
        tmp_22_reg_2740 <= mod_data_V_data_V_0_data_out[32'd21];
        tmp_23_reg_2745 <= mod_data_V_data_V_0_data_out[32'd22];
        tmp_24_reg_2750 <= mod_data_V_data_V_0_data_out[32'd23];
        tmp_25_reg_2755 <= mod_data_V_data_V_0_data_out[32'd24];
        tmp_26_reg_2760 <= mod_data_V_data_V_0_data_out[32'd25];
        tmp_27_reg_2765 <= mod_data_V_data_V_0_data_out[32'd26];
        tmp_28_reg_2770 <= mod_data_V_data_V_0_data_out[32'd27];
        tmp_29_reg_2775 <= mod_data_V_data_V_0_data_out[32'd28];
        tmp_30_reg_2780 <= mod_data_V_data_V_0_data_out[32'd29];
        tmp_31_reg_2785 <= mod_data_V_data_V_0_data_out[32'd30];
        tmp_32_reg_2790 <= mod_data_V_data_V_0_data_out[32'd31];
        tmp_33_reg_2795 <= mod_data_V_data_V_0_data_out[32'd32];
        tmp_34_reg_2800 <= mod_data_V_data_V_0_data_out[32'd33];
        tmp_35_reg_2805 <= mod_data_V_data_V_0_data_out[32'd34];
        tmp_36_reg_2810 <= mod_data_V_data_V_0_data_out[32'd35];
        tmp_37_reg_2815 <= mod_data_V_data_V_0_data_out[32'd36];
        tmp_38_1_op_reg_3296 <= tmp_38_1_op_fu_1554_p2;
        tmp_38_reg_2820 <= mod_data_V_data_V_0_data_out[32'd37];
        tmp_39_reg_2825 <= mod_data_V_data_V_0_data_out[32'd38];
        tmp_40_reg_2830 <= mod_data_V_data_V_0_data_out[32'd39];
        tmp_41_reg_2835 <= mod_data_V_data_V_0_data_out[32'd40];
        tmp_42_reg_2840 <= mod_data_V_data_V_0_data_out[32'd41];
        tmp_43_reg_2845 <= mod_data_V_data_V_0_data_out[32'd42];
        tmp_44_reg_2850 <= mod_data_V_data_V_0_data_out[32'd43];
        tmp_45_reg_2855 <= mod_data_V_data_V_0_data_out[32'd44];
        tmp_46_reg_2860 <= mod_data_V_data_V_0_data_out[32'd45];
        tmp_47_reg_2865 <= mod_data_V_data_V_0_data_out[32'd46];
        tmp_48_reg_2870 <= mod_data_V_data_V_0_data_out[32'd47];
        tmp_49_reg_2875 <= mod_data_V_data_V_0_data_out[32'd48];
        tmp_50_reg_2880 <= mod_data_V_data_V_0_data_out[32'd49];
        tmp_51_reg_2885 <= mod_data_V_data_V_0_data_out[32'd50];
        tmp_52_reg_2890 <= mod_data_V_data_V_0_data_out[32'd51];
        tmp_53_reg_2895 <= mod_data_V_data_V_0_data_out[32'd52];
        tmp_54_reg_2900 <= mod_data_V_data_V_0_data_out[32'd53];
        tmp_55_reg_2905 <= mod_data_V_data_V_0_data_out[32'd54];
        tmp_56_reg_2910 <= mod_data_V_data_V_0_data_out[32'd55];
        tmp_57_reg_2915 <= mod_data_V_data_V_0_data_out[32'd56];
        tmp_58_reg_2920 <= mod_data_V_data_V_0_data_out[32'd57];
        tmp_59_reg_2925 <= mod_data_V_data_V_0_data_out[32'd58];
        tmp_60_reg_2930 <= mod_data_V_data_V_0_data_out[32'd59];
        tmp_61_reg_2935 <= mod_data_V_data_V_0_data_out[32'd60];
        tmp_62_reg_2940 <= mod_data_V_data_V_0_data_out[32'd61];
        tmp_63_reg_2945 <= mod_data_V_data_V_0_data_out[32'd62];
        tmp_64_reg_2950 <= mod_data_V_data_V_0_data_out[32'd63];
        tmp_65_reg_2955 <= mod_data_V_data_V_0_data_out[32'd64];
        tmp_66_reg_2960 <= mod_data_V_data_V_0_data_out[32'd65];
        tmp_67_reg_2965 <= mod_data_V_data_V_0_data_out[32'd66];
        tmp_68_reg_2970 <= mod_data_V_data_V_0_data_out[32'd67];
        tmp_69_reg_2975 <= mod_data_V_data_V_0_data_out[32'd68];
        tmp_70_reg_2980 <= mod_data_V_data_V_0_data_out[32'd69];
        tmp_71_reg_2985 <= mod_data_V_data_V_0_data_out[32'd70];
        tmp_72_reg_2990 <= mod_data_V_data_V_0_data_out[32'd71];
        tmp_73_reg_2995 <= mod_data_V_data_V_0_data_out[32'd72];
        tmp_74_reg_3000 <= mod_data_V_data_V_0_data_out[32'd73];
        tmp_75_reg_3005 <= mod_data_V_data_V_0_data_out[32'd74];
        tmp_76_reg_3010 <= mod_data_V_data_V_0_data_out[32'd75];
        tmp_77_reg_3015 <= mod_data_V_data_V_0_data_out[32'd76];
        tmp_78_reg_3020 <= mod_data_V_data_V_0_data_out[32'd77];
        tmp_79_reg_3025 <= mod_data_V_data_V_0_data_out[32'd78];
        tmp_80_reg_3030 <= mod_data_V_data_V_0_data_out[32'd79];
        tmp_81_reg_3035 <= mod_data_V_data_V_0_data_out[32'd80];
        tmp_82_reg_3040 <= mod_data_V_data_V_0_data_out[32'd81];
        tmp_83_reg_3045 <= mod_data_V_data_V_0_data_out[32'd82];
        tmp_84_reg_3050 <= mod_data_V_data_V_0_data_out[32'd83];
        tmp_85_reg_3055 <= mod_data_V_data_V_0_data_out[32'd84];
        tmp_86_reg_3060 <= mod_data_V_data_V_0_data_out[32'd85];
        tmp_87_reg_3065 <= mod_data_V_data_V_0_data_out[32'd86];
        tmp_88_reg_3070 <= mod_data_V_data_V_0_data_out[32'd87];
        tmp_89_reg_3075 <= mod_data_V_data_V_0_data_out[32'd88];
        tmp_90_reg_3080 <= mod_data_V_data_V_0_data_out[32'd89];
        tmp_91_reg_3085 <= mod_data_V_data_V_0_data_out[32'd90];
        tmp_92_reg_3090 <= mod_data_V_data_V_0_data_out[32'd91];
        tmp_93_reg_3095 <= mod_data_V_data_V_0_data_out[32'd92];
        tmp_94_reg_3100 <= mod_data_V_data_V_0_data_out[32'd93];
        tmp_95_reg_3105 <= mod_data_V_data_V_0_data_out[32'd94];
        tmp_96_reg_3110 <= mod_data_V_data_V_0_data_out[32'd95];
        tmp_97_reg_3115 <= mod_data_V_data_V_0_data_out[32'd96];
        tmp_98_reg_3120 <= mod_data_V_data_V_0_data_out[32'd97];
        tmp_99_reg_3125 <= mod_data_V_data_V_0_data_out[32'd98];
        tmp_last_V_1_reg_3285 <= tmp_last_V_1_fu_1528_p2;
        tmp_last_V_2_reg_3290 <= tmp_last_V_2_fu_1548_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_last_V_3_reg_3306 <= tmp_last_V_3_fu_1715_p2;
        tmp_last_V_4_reg_3311 <= tmp_last_V_4_fu_1735_p2;
        tmp_last_V_5_reg_3316 <= tmp_last_V_5_fu_1755_p2;
        tmp_last_V_6_reg_3321 <= tmp_last_V_6_fu_1775_p2;
        tmp_last_V_7_reg_3326 <= tmp_last_V_7_fu_1795_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        demod_data_TDATA_blk_n = demod_data_V_data_V_1_state[1'd1];
    end else begin
        demod_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7_01001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            demod_data_V_data_V_1_data_in = tmp_data_V_7_fu_2678_p17;
        end else if (((1'b0 == ap_block_pp0_stage6_01001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            demod_data_V_data_V_1_data_in = tmp_data_V_6_fu_2529_p17;
        end else if (((1'b0 == ap_block_pp0_stage5_01001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            demod_data_V_data_V_1_data_in = tmp_data_V_5_fu_2380_p17;
        end else if (((1'b0 == ap_block_pp0_stage4_01001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            demod_data_V_data_V_1_data_in = tmp_data_V_4_fu_2231_p17;
        end else if (((1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            demod_data_V_data_V_1_data_in = tmp_data_V_3_fu_2082_p17;
        end else if (((1'b0 == ap_block_pp0_stage2_01001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            demod_data_V_data_V_1_data_in = tmp_data_V_2_fu_1933_p17;
        end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            demod_data_V_data_V_1_data_in = tmp_data_V_1_fu_1672_p17;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            demod_data_V_data_V_1_data_in = tmp_data_V_fu_1466_p17;
        end else begin
            demod_data_V_data_V_1_data_in = 'bx;
        end
    end else begin
        demod_data_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((demod_data_V_data_V_1_sel == 1'b1)) begin
        demod_data_V_data_V_1_data_out = demod_data_V_data_V_1_payload_B;
    end else begin
        demod_data_V_data_V_1_data_out = demod_data_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        demod_data_V_data_V_1_vld_in = 1'b1;
    end else begin
        demod_data_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage7_01001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            demod_data_V_last_V_1_data_in = tmp_last_V_7_reg_3326;
        end else if (((1'b0 == ap_block_pp0_stage6_01001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            demod_data_V_last_V_1_data_in = tmp_last_V_6_reg_3321;
        end else if (((1'b0 == ap_block_pp0_stage5_01001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            demod_data_V_last_V_1_data_in = tmp_last_V_5_reg_3316;
        end else if (((1'b0 == ap_block_pp0_stage4_01001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            demod_data_V_last_V_1_data_in = tmp_last_V_4_reg_3311;
        end else if (((1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            demod_data_V_last_V_1_data_in = tmp_last_V_3_reg_3306;
        end else if (((1'b0 == ap_block_pp0_stage2_01001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            demod_data_V_last_V_1_data_in = tmp_last_V_2_reg_3290;
        end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            demod_data_V_last_V_1_data_in = tmp_last_V_1_reg_3285;
        end else if (((1'b0 == ap_block_pp0_stage0_01001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            demod_data_V_last_V_1_data_in = tmp_last_V_fu_1507_p2;
        end else begin
            demod_data_V_last_V_1_data_in = 'bx;
        end
    end else begin
        demod_data_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((demod_data_V_last_V_1_sel == 1'b1)) begin
        demod_data_V_last_V_1_data_out = demod_data_V_last_V_1_payload_B;
    end else begin
        demod_data_V_last_V_1_data_out = demod_data_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        demod_data_V_last_V_1_vld_in = 1'b1;
    end else begin
        demod_data_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        mod_data_TDATA_blk_n = mod_data_V_data_V_0_state[1'd0];
    end else begin
        mod_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mod_data_V_data_V_0_ack_out = 1'b1;
    end else begin
        mod_data_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((mod_data_V_data_V_0_sel == 1'b1)) begin
        mod_data_V_data_V_0_data_out = mod_data_V_data_V_0_payload_B;
    end else begin
        mod_data_V_data_V_0_data_out = mod_data_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mod_data_V_last_V_0_ack_out = 1'b1;
    end else begin
        mod_data_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((mod_data_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((demod_data_V_data_V_1_ack_in == 1'b0) | (demod_data_V_last_V_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((mod_data_V_data_V_0_vld_out == 1'b0) | (demod_data_V_data_V_1_ack_in == 1'b0) | (ap_start == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((demod_data_V_data_V_1_ack_in == 1'b0) | (demod_data_V_last_V_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((mod_data_V_data_V_0_vld_out == 1'b0) | (demod_data_V_data_V_1_ack_in == 1'b0) | (ap_start == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((demod_data_V_data_V_1_ack_in == 1'b0) | (demod_data_V_last_V_1_ack_in == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((demod_data_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((demod_data_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((demod_data_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((demod_data_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((demod_data_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((demod_data_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((demod_data_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((demod_data_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((demod_data_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((demod_data_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((demod_data_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((demod_data_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((demod_data_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((demod_data_V_data_V_1_ack_in == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((mod_data_V_data_V_0_vld_out == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((demod_data_V_data_V_1_ack_in == 1'b0) | (demod_data_V_last_V_1_ack_in == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign demod_axi_trx_load_o_fu_1514_p2 = (32'd1 + demod_axi_trx);

assign demod_data_TDATA = demod_data_V_data_V_1_data_out;

assign demod_data_TLAST = demod_data_V_last_V_1_data_out;

assign demod_data_TVALID = demod_data_V_last_V_1_state[1'd0];

assign demod_data_V_data_V_1_ack_in = demod_data_V_data_V_1_state[1'd1];

assign demod_data_V_data_V_1_ack_out = demod_data_TREADY;

assign demod_data_V_data_V_1_load_A = (~demod_data_V_data_V_1_sel_wr & demod_data_V_data_V_1_state_cmp_full);

assign demod_data_V_data_V_1_load_B = (demod_data_V_data_V_1_state_cmp_full & demod_data_V_data_V_1_sel_wr);

assign demod_data_V_data_V_1_sel = demod_data_V_data_V_1_sel_rd;

assign demod_data_V_data_V_1_state_cmp_full = ((demod_data_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign demod_data_V_data_V_1_vld_out = demod_data_V_data_V_1_state[1'd0];

assign demod_data_V_last_V_1_ack_in = demod_data_V_last_V_1_state[1'd1];

assign demod_data_V_last_V_1_ack_out = demod_data_TREADY;

assign demod_data_V_last_V_1_load_A = (~demod_data_V_last_V_1_sel_wr & demod_data_V_last_V_1_state_cmp_full);

assign demod_data_V_last_V_1_load_B = (demod_data_V_last_V_1_state_cmp_full & demod_data_V_last_V_1_sel_wr);

assign demod_data_V_last_V_1_sel = demod_data_V_last_V_1_sel_rd;

assign demod_data_V_last_V_1_state_cmp_full = ((demod_data_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign demod_data_V_last_V_1_vld_out = demod_data_V_last_V_1_state[1'd0];

assign mod_data_TREADY = mod_data_V_last_V_0_state[1'd1];

assign mod_data_V_data_V_0_ack_in = mod_data_V_data_V_0_state[1'd1];

assign mod_data_V_data_V_0_load_A = (mod_data_V_data_V_0_state_cmp_full & ~mod_data_V_data_V_0_sel_wr);

assign mod_data_V_data_V_0_load_B = (mod_data_V_data_V_0_state_cmp_full & mod_data_V_data_V_0_sel_wr);

assign mod_data_V_data_V_0_sel = mod_data_V_data_V_0_sel_rd;

assign mod_data_V_data_V_0_state_cmp_full = ((mod_data_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign mod_data_V_data_V_0_vld_in = mod_data_TVALID;

assign mod_data_V_data_V_0_vld_out = mod_data_V_data_V_0_state[1'd0];

assign mod_data_V_last_V_0_vld_in = mod_data_TVALID;

assign storemerge_100_fu_2459_p3 = ((tmp_103_reg_3145[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_101_fu_2466_p3 = ((tmp_104_reg_3150[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_102_fu_2473_p3 = ((tmp_105_reg_3155[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_103_fu_2480_p3 = ((tmp_106_reg_3160[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_104_fu_2487_p3 = ((tmp_107_reg_3165[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_105_fu_2494_p3 = ((tmp_108_reg_3170[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_106_fu_2501_p3 = ((tmp_109_reg_3175[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_107_fu_2508_p3 = ((tmp_110_reg_3180[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_108_fu_2515_p3 = ((tmp_111_reg_3185[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_109_fu_2522_p3 = ((tmp_112_reg_3190[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_10_fu_514_p3 = ((tmp_13_fu_506_p3[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_110_fu_2566_p3 = ((tmp_113_reg_3195[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_111_fu_2573_p3 = ((tmp_114_reg_3200[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_112_fu_2580_p3 = ((tmp_115_reg_3205[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_113_fu_2587_p3 = ((tmp_116_reg_3210[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_114_fu_2594_p3 = ((tmp_117_reg_3215[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_115_fu_2601_p3 = ((tmp_118_reg_3220[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_116_fu_2608_p3 = ((tmp_119_reg_3225[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_117_fu_2615_p3 = ((tmp_120_reg_3230[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_118_fu_2622_p3 = ((tmp_121_reg_3235[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_119_fu_2629_p3 = ((tmp_122_reg_3240[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_11_fu_530_p3 = ((tmp_14_fu_522_p3[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_120_fu_2636_p3 = ((tmp_123_reg_3245[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_121_fu_2643_p3 = ((tmp_124_reg_3250[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_122_fu_2650_p3 = ((tmp_125_reg_3255[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_123_fu_2657_p3 = ((tmp_126_reg_3260[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_124_fu_2664_p3 = ((tmp_127_reg_3265[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_125_fu_2671_p3 = ((tmp_128_reg_3270[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_12_fu_546_p3 = ((tmp_15_fu_538_p3[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_13_fu_562_p3 = ((tmp_16_fu_554_p3[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_14_fu_1560_p3 = ((tmp_17_reg_2715[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_15_fu_1567_p3 = ((tmp_18_reg_2720[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_16_fu_1574_p3 = ((tmp_19_reg_2725[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_17_fu_1581_p3 = ((tmp_20_reg_2730[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_18_fu_1588_p3 = ((tmp_21_reg_2735[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_19_fu_1595_p3 = ((tmp_22_reg_2740[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_1_fu_338_p3 = ((tmp_1_fu_330_p3[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_20_fu_1602_p3 = ((tmp_23_reg_2745[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_21_fu_1609_p3 = ((tmp_24_reg_2750[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_22_fu_1616_p3 = ((tmp_25_reg_2755[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_23_fu_1623_p3 = ((tmp_26_reg_2760[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_24_fu_1630_p3 = ((tmp_27_reg_2765[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_25_fu_1637_p3 = ((tmp_28_reg_2770[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_26_fu_1644_p3 = ((tmp_29_reg_2775[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_27_fu_1651_p3 = ((tmp_30_reg_2780[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_28_fu_1658_p3 = ((tmp_31_reg_2785[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_29_fu_1665_p3 = ((tmp_32_reg_2790[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_2_fu_354_p3 = ((tmp_3_fu_346_p3[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_30_fu_1821_p3 = ((tmp_33_reg_2795[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_31_fu_1828_p3 = ((tmp_34_reg_2800[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_32_fu_1835_p3 = ((tmp_35_reg_2805[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_33_fu_1842_p3 = ((tmp_36_reg_2810[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_34_fu_1849_p3 = ((tmp_37_reg_2815[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_35_fu_1856_p3 = ((tmp_38_reg_2820[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_36_fu_1863_p3 = ((tmp_39_reg_2825[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_37_fu_1870_p3 = ((tmp_40_reg_2830[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_38_fu_1877_p3 = ((tmp_41_reg_2835[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_39_fu_1884_p3 = ((tmp_42_reg_2840[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_3_fu_370_p3 = ((tmp_4_fu_362_p3[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_40_fu_1891_p3 = ((tmp_43_reg_2845[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_41_fu_1898_p3 = ((tmp_44_reg_2850[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_42_fu_1905_p3 = ((tmp_45_reg_2855[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_43_fu_1912_p3 = ((tmp_46_reg_2860[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_44_fu_1919_p3 = ((tmp_47_reg_2865[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_45_fu_1926_p3 = ((tmp_48_reg_2870[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_46_fu_1970_p3 = ((tmp_49_reg_2875[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_47_fu_1977_p3 = ((tmp_50_reg_2880[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_48_fu_1984_p3 = ((tmp_51_reg_2885[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_49_fu_1991_p3 = ((tmp_52_reg_2890[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_4_fu_386_p3 = ((tmp_5_fu_378_p3[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_50_fu_1998_p3 = ((tmp_53_reg_2895[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_51_fu_2005_p3 = ((tmp_54_reg_2900[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_52_fu_2012_p3 = ((tmp_55_reg_2905[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_53_fu_2019_p3 = ((tmp_56_reg_2910[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_54_fu_2026_p3 = ((tmp_57_reg_2915[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_55_fu_2033_p3 = ((tmp_58_reg_2920[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_56_fu_2040_p3 = ((tmp_59_reg_2925[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_57_fu_2047_p3 = ((tmp_60_reg_2930[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_58_fu_2054_p3 = ((tmp_61_reg_2935[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_59_fu_2061_p3 = ((tmp_62_reg_2940[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_5_fu_402_p3 = ((tmp_6_fu_394_p3[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_60_fu_2068_p3 = ((tmp_63_reg_2945[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_61_fu_2075_p3 = ((tmp_64_reg_2950[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_62_fu_2119_p3 = ((tmp_65_reg_2955[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_63_fu_2126_p3 = ((tmp_66_reg_2960[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_64_fu_2133_p3 = ((tmp_67_reg_2965[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_65_fu_2140_p3 = ((tmp_68_reg_2970[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_66_fu_2147_p3 = ((tmp_69_reg_2975[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_67_fu_2154_p3 = ((tmp_70_reg_2980[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_68_fu_2161_p3 = ((tmp_71_reg_2985[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_69_fu_2168_p3 = ((tmp_72_reg_2990[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_6_fu_418_p3 = ((tmp_7_fu_410_p3[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_70_fu_2175_p3 = ((tmp_73_reg_2995[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_71_fu_2182_p3 = ((tmp_74_reg_3000[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_72_fu_2189_p3 = ((tmp_75_reg_3005[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_73_fu_2196_p3 = ((tmp_76_reg_3010[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_74_fu_2203_p3 = ((tmp_77_reg_3015[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_75_fu_2210_p3 = ((tmp_78_reg_3020[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_76_fu_2217_p3 = ((tmp_79_reg_3025[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_77_fu_2224_p3 = ((tmp_80_reg_3030[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_78_fu_2268_p3 = ((tmp_81_reg_3035[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_79_fu_2275_p3 = ((tmp_82_reg_3040[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_7_fu_498_p3 = ((tmp_12_fu_490_p3[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_80_fu_2282_p3 = ((tmp_83_reg_3045[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_81_fu_2289_p3 = ((tmp_84_reg_3050[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_82_fu_2296_p3 = ((tmp_85_reg_3055[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_83_fu_2303_p3 = ((tmp_86_reg_3060[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_84_fu_2310_p3 = ((tmp_87_reg_3065[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_85_fu_2317_p3 = ((tmp_88_reg_3070[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_86_fu_2324_p3 = ((tmp_89_reg_3075[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_87_fu_2331_p3 = ((tmp_90_reg_3080[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_88_fu_2338_p3 = ((tmp_91_reg_3085[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_89_fu_2345_p3 = ((tmp_92_reg_3090[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_8_fu_450_p3 = ((tmp_9_fu_442_p3[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_90_fu_2352_p3 = ((tmp_93_reg_3095[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_91_fu_2359_p3 = ((tmp_94_reg_3100[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_92_fu_2366_p3 = ((tmp_95_reg_3105[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_93_fu_2373_p3 = ((tmp_96_reg_3110[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_94_fu_2417_p3 = ((tmp_97_reg_3115[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_95_fu_2424_p3 = ((tmp_98_reg_3120[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_96_fu_2431_p3 = ((tmp_99_reg_3125[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_97_fu_2438_p3 = ((tmp_100_reg_3130[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_98_fu_2445_p3 = ((tmp_101_reg_3135[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_99_fu_2452_p3 = ((tmp_102_reg_3140[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_9_fu_466_p3 = ((tmp_10_fu_458_p3[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_fu_322_p3 = ((tmp_fu_318_p1[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign storemerge_s_fu_482_p3 = ((tmp_11_fu_474_p3[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign tmp_10_fu_458_p3 = mod_data_V_data_V_0_data_out[32'd9];

assign tmp_11_fu_474_p3 = mod_data_V_data_V_0_data_out[32'd10];

assign tmp_12_fu_490_p3 = mod_data_V_data_V_0_data_out[32'd11];

assign tmp_13_fu_506_p3 = mod_data_V_data_V_0_data_out[32'd12];

assign tmp_14_fu_522_p3 = mod_data_V_data_V_0_data_out[32'd13];

assign tmp_15_fu_538_p3 = mod_data_V_data_V_0_data_out[32'd14];

assign tmp_16_fu_554_p3 = mod_data_V_data_V_0_data_out[32'd15];

assign tmp_1_fu_330_p3 = mod_data_V_data_V_0_data_out[32'd1];

assign tmp_2_fu_434_p3 = ((tmp_8_fu_426_p3[0:0] === 1'b1) ? 8'd127 : 8'd129);

assign tmp_38_1_fu_1540_p3 = ((tmp_last_V_1_fu_1528_p2[0:0] === 1'b1) ? 32'd1 : tmp_38_op_fu_1534_p2);

assign tmp_38_1_op_fu_1554_p2 = (32'd1 + tmp_38_1_fu_1540_p3);

assign tmp_38_2_fu_1709_p3 = ((tmp_last_V_2_reg_3290[0:0] === 1'b1) ? 32'd1 : tmp_38_1_op_reg_3296);

assign tmp_38_2_op_fu_1721_p2 = (32'd1 + tmp_38_2_fu_1709_p3);

assign tmp_38_3_fu_1727_p3 = ((tmp_last_V_3_fu_1715_p2[0:0] === 1'b1) ? 32'd1 : tmp_38_2_op_fu_1721_p2);

assign tmp_38_3_op_fu_1741_p2 = (32'd1 + tmp_38_3_fu_1727_p3);

assign tmp_38_4_fu_1747_p3 = ((tmp_last_V_4_fu_1735_p2[0:0] === 1'b1) ? 32'd1 : tmp_38_3_op_fu_1741_p2);

assign tmp_38_4_op_fu_1761_p2 = (32'd1 + tmp_38_4_fu_1747_p3);

assign tmp_38_5_fu_1767_p3 = ((tmp_last_V_5_fu_1755_p2[0:0] === 1'b1) ? 32'd1 : tmp_38_4_op_fu_1761_p2);

assign tmp_38_5_op_fu_1781_p2 = (32'd1 + tmp_38_5_fu_1767_p3);

assign tmp_38_6_fu_1787_p3 = ((tmp_last_V_6_fu_1775_p2[0:0] === 1'b1) ? 32'd1 : tmp_38_5_op_fu_1781_p2);

assign tmp_38_6_op_fu_1801_p2 = (32'd1 + tmp_38_6_fu_1787_p3);

assign tmp_38_7_fu_1807_p3 = ((tmp_last_V_7_fu_1795_p2[0:0] === 1'b1) ? 32'd1 : tmp_38_6_op_fu_1801_p2);

assign tmp_38_op_fu_1534_p2 = (32'd1 + tmp_s_fu_1520_p3);

assign tmp_3_fu_346_p3 = mod_data_V_data_V_0_data_out[32'd2];

assign tmp_4_fu_362_p3 = mod_data_V_data_V_0_data_out[32'd3];

assign tmp_5_fu_378_p3 = mod_data_V_data_V_0_data_out[32'd4];

assign tmp_6_fu_394_p3 = mod_data_V_data_V_0_data_out[32'd5];

assign tmp_7_fu_410_p3 = mod_data_V_data_V_0_data_out[32'd6];

assign tmp_8_fu_426_p3 = mod_data_V_data_V_0_data_out[32'd7];

assign tmp_9_fu_442_p3 = mod_data_V_data_V_0_data_out[32'd8];

assign tmp_data_V_1_fu_1672_p17 = {{{{{{{{{{{{{{{{storemerge_29_fu_1665_p3}, {storemerge_28_fu_1658_p3}}, {storemerge_27_fu_1651_p3}}, {storemerge_26_fu_1644_p3}}, {storemerge_25_fu_1637_p3}}, {storemerge_24_fu_1630_p3}}, {storemerge_23_fu_1623_p3}}, {storemerge_22_fu_1616_p3}}, {storemerge_21_fu_1609_p3}}, {storemerge_20_fu_1602_p3}}, {storemerge_19_fu_1595_p3}}, {storemerge_18_fu_1588_p3}}, {storemerge_17_fu_1581_p3}}, {storemerge_16_fu_1574_p3}}, {storemerge_15_fu_1567_p3}}, {storemerge_14_fu_1560_p3}};

assign tmp_data_V_2_fu_1933_p17 = {{{{{{{{{{{{{{{{storemerge_45_fu_1926_p3}, {storemerge_44_fu_1919_p3}}, {storemerge_43_fu_1912_p3}}, {storemerge_42_fu_1905_p3}}, {storemerge_41_fu_1898_p3}}, {storemerge_40_fu_1891_p3}}, {storemerge_39_fu_1884_p3}}, {storemerge_38_fu_1877_p3}}, {storemerge_37_fu_1870_p3}}, {storemerge_36_fu_1863_p3}}, {storemerge_35_fu_1856_p3}}, {storemerge_34_fu_1849_p3}}, {storemerge_33_fu_1842_p3}}, {storemerge_32_fu_1835_p3}}, {storemerge_31_fu_1828_p3}}, {storemerge_30_fu_1821_p3}};

assign tmp_data_V_3_fu_2082_p17 = {{{{{{{{{{{{{{{{storemerge_61_fu_2075_p3}, {storemerge_60_fu_2068_p3}}, {storemerge_59_fu_2061_p3}}, {storemerge_58_fu_2054_p3}}, {storemerge_57_fu_2047_p3}}, {storemerge_56_fu_2040_p3}}, {storemerge_55_fu_2033_p3}}, {storemerge_54_fu_2026_p3}}, {storemerge_53_fu_2019_p3}}, {storemerge_52_fu_2012_p3}}, {storemerge_51_fu_2005_p3}}, {storemerge_50_fu_1998_p3}}, {storemerge_49_fu_1991_p3}}, {storemerge_48_fu_1984_p3}}, {storemerge_47_fu_1977_p3}}, {storemerge_46_fu_1970_p3}};

assign tmp_data_V_4_fu_2231_p17 = {{{{{{{{{{{{{{{{storemerge_77_fu_2224_p3}, {storemerge_76_fu_2217_p3}}, {storemerge_75_fu_2210_p3}}, {storemerge_74_fu_2203_p3}}, {storemerge_73_fu_2196_p3}}, {storemerge_72_fu_2189_p3}}, {storemerge_71_fu_2182_p3}}, {storemerge_70_fu_2175_p3}}, {storemerge_69_fu_2168_p3}}, {storemerge_68_fu_2161_p3}}, {storemerge_67_fu_2154_p3}}, {storemerge_66_fu_2147_p3}}, {storemerge_65_fu_2140_p3}}, {storemerge_64_fu_2133_p3}}, {storemerge_63_fu_2126_p3}}, {storemerge_62_fu_2119_p3}};

assign tmp_data_V_5_fu_2380_p17 = {{{{{{{{{{{{{{{{storemerge_93_fu_2373_p3}, {storemerge_92_fu_2366_p3}}, {storemerge_91_fu_2359_p3}}, {storemerge_90_fu_2352_p3}}, {storemerge_89_fu_2345_p3}}, {storemerge_88_fu_2338_p3}}, {storemerge_87_fu_2331_p3}}, {storemerge_86_fu_2324_p3}}, {storemerge_85_fu_2317_p3}}, {storemerge_84_fu_2310_p3}}, {storemerge_83_fu_2303_p3}}, {storemerge_82_fu_2296_p3}}, {storemerge_81_fu_2289_p3}}, {storemerge_80_fu_2282_p3}}, {storemerge_79_fu_2275_p3}}, {storemerge_78_fu_2268_p3}};

assign tmp_data_V_6_fu_2529_p17 = {{{{{{{{{{{{{{{{storemerge_109_fu_2522_p3}, {storemerge_108_fu_2515_p3}}, {storemerge_107_fu_2508_p3}}, {storemerge_106_fu_2501_p3}}, {storemerge_105_fu_2494_p3}}, {storemerge_104_fu_2487_p3}}, {storemerge_103_fu_2480_p3}}, {storemerge_102_fu_2473_p3}}, {storemerge_101_fu_2466_p3}}, {storemerge_100_fu_2459_p3}}, {storemerge_99_fu_2452_p3}}, {storemerge_98_fu_2445_p3}}, {storemerge_97_fu_2438_p3}}, {storemerge_96_fu_2431_p3}}, {storemerge_95_fu_2424_p3}}, {storemerge_94_fu_2417_p3}};

assign tmp_data_V_7_fu_2678_p17 = {{{{{{{{{{{{{{{{storemerge_125_fu_2671_p3}, {storemerge_124_fu_2664_p3}}, {storemerge_123_fu_2657_p3}}, {storemerge_122_fu_2650_p3}}, {storemerge_121_fu_2643_p3}}, {storemerge_120_fu_2636_p3}}, {storemerge_119_fu_2629_p3}}, {storemerge_118_fu_2622_p3}}, {storemerge_117_fu_2615_p3}}, {storemerge_116_fu_2608_p3}}, {storemerge_115_fu_2601_p3}}, {storemerge_114_fu_2594_p3}}, {storemerge_113_fu_2587_p3}}, {storemerge_112_fu_2580_p3}}, {storemerge_111_fu_2573_p3}}, {storemerge_110_fu_2566_p3}};

assign tmp_data_V_fu_1466_p17 = {{{{{{{{{{{{{{{{storemerge_13_fu_562_p3}, {storemerge_12_fu_546_p3}}, {storemerge_11_fu_530_p3}}, {storemerge_10_fu_514_p3}}, {storemerge_7_fu_498_p3}}, {storemerge_s_fu_482_p3}}, {storemerge_9_fu_466_p3}}, {storemerge_8_fu_450_p3}}, {tmp_2_fu_434_p3}}, {storemerge_6_fu_418_p3}}, {storemerge_5_fu_402_p3}}, {storemerge_4_fu_386_p3}}, {storemerge_3_fu_370_p3}}, {storemerge_2_fu_354_p3}}, {storemerge_1_fu_338_p3}}, {storemerge_fu_322_p3}};

assign tmp_fu_318_p1 = mod_data_V_data_V_0_data_out[0:0];

assign tmp_last_V_1_fu_1528_p2 = ((tmp_s_fu_1520_p3 == 32'd32) ? 1'b1 : 1'b0);

assign tmp_last_V_2_fu_1548_p2 = ((tmp_38_1_fu_1540_p3 == 32'd32) ? 1'b1 : 1'b0);

assign tmp_last_V_3_fu_1715_p2 = ((tmp_38_2_fu_1709_p3 == 32'd32) ? 1'b1 : 1'b0);

assign tmp_last_V_4_fu_1735_p2 = ((tmp_38_3_fu_1727_p3 == 32'd32) ? 1'b1 : 1'b0);

assign tmp_last_V_5_fu_1755_p2 = ((tmp_38_4_fu_1747_p3 == 32'd32) ? 1'b1 : 1'b0);

assign tmp_last_V_6_fu_1775_p2 = ((tmp_38_5_fu_1767_p3 == 32'd32) ? 1'b1 : 1'b0);

assign tmp_last_V_7_fu_1795_p2 = ((tmp_38_6_fu_1787_p3 == 32'd32) ? 1'b1 : 1'b0);

assign tmp_last_V_fu_1507_p2 = ((demod_axi_trx == 32'd32) ? 1'b1 : 1'b0);

assign tmp_s_fu_1520_p3 = ((tmp_last_V_fu_1507_p2[0:0] === 1'b1) ? 32'd1 : demod_axi_trx_load_o_fu_1514_p2);

endmodule //bpsk_modulation
