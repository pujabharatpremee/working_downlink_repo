-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity rate_match is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    RMdataOut_TREADY : IN STD_LOGIC;
    RMdataIn_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    RMdataIn_TVALID : IN STD_LOGIC;
    RMdataIn_TREADY : OUT STD_LOGIC;
    RMdataIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    RMdataOut_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    RMdataOut_TVALID : OUT STD_LOGIC;
    RMdataOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of rate_match is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "rate_match,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu21dr-ffvd1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=7,HLS_SYN_TPT=7,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=889,HLS_SYN_LUT=258,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal RMdataOut_V_data_V_1_ack_in : STD_LOGIC;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal RMdataIn_V_data_V_0_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal RMdataIn_V_data_V_0_vld_in : STD_LOGIC;
    signal RMdataIn_V_data_V_0_vld_out : STD_LOGIC;
    signal RMdataIn_V_data_V_0_ack_in : STD_LOGIC;
    signal RMdataIn_V_data_V_0_ack_out : STD_LOGIC;
    signal RMdataIn_V_data_V_0_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal RMdataIn_V_data_V_0_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal RMdataIn_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal RMdataIn_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal RMdataIn_V_data_V_0_sel : STD_LOGIC;
    signal RMdataIn_V_data_V_0_load_A : STD_LOGIC;
    signal RMdataIn_V_data_V_0_load_B : STD_LOGIC;
    signal RMdataIn_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal RMdataIn_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal RMdataIn_V_last_V_0_vld_in : STD_LOGIC;
    signal RMdataIn_V_last_V_0_ack_out : STD_LOGIC;
    signal RMdataIn_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal RMdataOut_V_data_V_1_data_in : STD_LOGIC_VECTOR (127 downto 0);
    signal RMdataOut_V_data_V_1_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal RMdataOut_V_data_V_1_vld_in : STD_LOGIC;
    signal RMdataOut_V_data_V_1_vld_out : STD_LOGIC;
    signal RMdataOut_V_data_V_1_ack_out : STD_LOGIC;
    signal RMdataOut_V_data_V_1_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal RMdataOut_V_data_V_1_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal RMdataOut_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal RMdataOut_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal RMdataOut_V_data_V_1_sel : STD_LOGIC;
    signal RMdataOut_V_data_V_1_load_A : STD_LOGIC;
    signal RMdataOut_V_data_V_1_load_B : STD_LOGIC;
    signal RMdataOut_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal RMdataOut_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal RMdataOut_V_last_V_1_data_in : STD_LOGIC_VECTOR (0 downto 0);
    signal RMdataOut_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal RMdataOut_V_last_V_1_vld_in : STD_LOGIC;
    signal RMdataOut_V_last_V_1_vld_out : STD_LOGIC;
    signal RMdataOut_V_last_V_1_ack_in : STD_LOGIC;
    signal RMdataOut_V_last_V_1_ack_out : STD_LOGIC;
    signal RMdataOut_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal RMdataOut_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal RMdataOut_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal RMdataOut_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal RMdataOut_V_last_V_1_sel : STD_LOGIC;
    signal RMdataOut_V_last_V_1_load_A : STD_LOGIC;
    signal RMdataOut_V_last_V_1_load_B : STD_LOGIC;
    signal RMdataOut_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal RMdataOut_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal RMdataIn_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal RMdataOut_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_data_V_reg_76 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_data_V_1_reg_81 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_fu_68_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_reg_86 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_data_V_4_fu_72_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_01001 : BOOLEAN;
    signal ap_block_pp0_stage6_01001 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    RMdataIn_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                RMdataIn_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = RMdataIn_V_data_V_0_ack_out) and (ap_const_logic_1 = RMdataIn_V_data_V_0_vld_out))) then 
                                        RMdataIn_V_data_V_0_sel_rd <= not(RMdataIn_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    RMdataIn_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                RMdataIn_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = RMdataIn_V_data_V_0_ack_in) and (ap_const_logic_1 = RMdataIn_V_data_V_0_vld_in))) then 
                                        RMdataIn_V_data_V_0_sel_wr <= not(RMdataIn_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    RMdataIn_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                RMdataIn_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = RMdataIn_V_data_V_0_state) and (ap_const_logic_0 = RMdataIn_V_data_V_0_vld_in)) or ((ap_const_lv2_3 = RMdataIn_V_data_V_0_state) and (ap_const_logic_0 = RMdataIn_V_data_V_0_vld_in) and (ap_const_logic_1 = RMdataIn_V_data_V_0_ack_out)))) then 
                    RMdataIn_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = RMdataIn_V_data_V_0_state) and (ap_const_logic_0 = RMdataIn_V_data_V_0_ack_out)) or ((ap_const_lv2_3 = RMdataIn_V_data_V_0_state) and (ap_const_logic_0 = RMdataIn_V_data_V_0_ack_out) and (ap_const_logic_1 = RMdataIn_V_data_V_0_vld_in)))) then 
                    RMdataIn_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = RMdataIn_V_data_V_0_vld_in) and (ap_const_logic_1 = RMdataIn_V_data_V_0_ack_out))) and not(((ap_const_logic_0 = RMdataIn_V_data_V_0_ack_out) and (ap_const_logic_1 = RMdataIn_V_data_V_0_vld_in))) and (ap_const_lv2_3 = RMdataIn_V_data_V_0_state)) or ((ap_const_lv2_1 = RMdataIn_V_data_V_0_state) and (ap_const_logic_1 = RMdataIn_V_data_V_0_ack_out)) or ((ap_const_lv2_2 = RMdataIn_V_data_V_0_state) and (ap_const_logic_1 = RMdataIn_V_data_V_0_vld_in)))) then 
                    RMdataIn_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    RMdataIn_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    RMdataIn_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                RMdataIn_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = RMdataIn_V_last_V_0_state) and (ap_const_logic_0 = RMdataIn_V_last_V_0_vld_in)) or ((ap_const_lv2_3 = RMdataIn_V_last_V_0_state) and (ap_const_logic_0 = RMdataIn_V_last_V_0_vld_in) and (ap_const_logic_1 = RMdataIn_V_last_V_0_ack_out)))) then 
                    RMdataIn_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = RMdataIn_V_last_V_0_state) and (ap_const_logic_0 = RMdataIn_V_last_V_0_ack_out)) or ((ap_const_lv2_3 = RMdataIn_V_last_V_0_state) and (ap_const_logic_0 = RMdataIn_V_last_V_0_ack_out) and (ap_const_logic_1 = RMdataIn_V_last_V_0_vld_in)))) then 
                    RMdataIn_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = RMdataIn_V_last_V_0_vld_in) and (ap_const_logic_1 = RMdataIn_V_last_V_0_ack_out))) and not(((ap_const_logic_0 = RMdataIn_V_last_V_0_ack_out) and (ap_const_logic_1 = RMdataIn_V_last_V_0_vld_in))) and (ap_const_lv2_3 = RMdataIn_V_last_V_0_state)) or ((ap_const_lv2_1 = RMdataIn_V_last_V_0_state) and (ap_const_logic_1 = RMdataIn_V_last_V_0_ack_out)) or ((ap_const_lv2_2 = RMdataIn_V_last_V_0_state) and (ap_const_logic_1 = RMdataIn_V_last_V_0_vld_in)))) then 
                    RMdataIn_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    RMdataIn_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    RMdataOut_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                RMdataOut_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = RMdataOut_V_data_V_1_ack_out) and (ap_const_logic_1 = RMdataOut_V_data_V_1_vld_out))) then 
                                        RMdataOut_V_data_V_1_sel_rd <= not(RMdataOut_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    RMdataOut_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                RMdataOut_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = RMdataOut_V_data_V_1_ack_in) and (ap_const_logic_1 = RMdataOut_V_data_V_1_vld_in))) then 
                                        RMdataOut_V_data_V_1_sel_wr <= not(RMdataOut_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    RMdataOut_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                RMdataOut_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = RMdataOut_V_data_V_1_state) and (ap_const_logic_0 = RMdataOut_V_data_V_1_vld_in)) or ((ap_const_lv2_3 = RMdataOut_V_data_V_1_state) and (ap_const_logic_0 = RMdataOut_V_data_V_1_vld_in) and (ap_const_logic_1 = RMdataOut_V_data_V_1_ack_out)))) then 
                    RMdataOut_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = RMdataOut_V_data_V_1_state) and (ap_const_logic_0 = RMdataOut_V_data_V_1_ack_out)) or ((ap_const_lv2_3 = RMdataOut_V_data_V_1_state) and (ap_const_logic_0 = RMdataOut_V_data_V_1_ack_out) and (ap_const_logic_1 = RMdataOut_V_data_V_1_vld_in)))) then 
                    RMdataOut_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = RMdataOut_V_data_V_1_vld_in) and (ap_const_logic_1 = RMdataOut_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = RMdataOut_V_data_V_1_ack_out) and (ap_const_logic_1 = RMdataOut_V_data_V_1_vld_in))) and (ap_const_lv2_3 = RMdataOut_V_data_V_1_state)) or ((ap_const_lv2_1 = RMdataOut_V_data_V_1_state) and (ap_const_logic_1 = RMdataOut_V_data_V_1_ack_out)) or ((ap_const_lv2_2 = RMdataOut_V_data_V_1_state) and (ap_const_logic_1 = RMdataOut_V_data_V_1_vld_in)))) then 
                    RMdataOut_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    RMdataOut_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    RMdataOut_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                RMdataOut_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = RMdataOut_V_last_V_1_ack_out) and (ap_const_logic_1 = RMdataOut_V_last_V_1_vld_out))) then 
                                        RMdataOut_V_last_V_1_sel_rd <= not(RMdataOut_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    RMdataOut_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                RMdataOut_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = RMdataOut_V_last_V_1_ack_in) and (ap_const_logic_1 = RMdataOut_V_last_V_1_vld_in))) then 
                                        RMdataOut_V_last_V_1_sel_wr <= not(RMdataOut_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    RMdataOut_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                RMdataOut_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = RMdataOut_V_last_V_1_state) and (ap_const_logic_0 = RMdataOut_V_last_V_1_vld_in)) or ((ap_const_lv2_3 = RMdataOut_V_last_V_1_state) and (ap_const_logic_0 = RMdataOut_V_last_V_1_vld_in) and (ap_const_logic_1 = RMdataOut_V_last_V_1_ack_out)))) then 
                    RMdataOut_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = RMdataOut_V_last_V_1_state) and (ap_const_logic_0 = RMdataOut_V_last_V_1_ack_out)) or ((ap_const_lv2_3 = RMdataOut_V_last_V_1_state) and (ap_const_logic_0 = RMdataOut_V_last_V_1_ack_out) and (ap_const_logic_1 = RMdataOut_V_last_V_1_vld_in)))) then 
                    RMdataOut_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = RMdataOut_V_last_V_1_vld_in) and (ap_const_logic_1 = RMdataOut_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = RMdataOut_V_last_V_1_ack_out) and (ap_const_logic_1 = RMdataOut_V_last_V_1_vld_in))) and (ap_const_lv2_3 = RMdataOut_V_last_V_1_state)) or ((ap_const_lv2_1 = RMdataOut_V_last_V_1_state) and (ap_const_logic_1 = RMdataOut_V_last_V_1_ack_out)) or ((ap_const_lv2_2 = RMdataOut_V_last_V_1_state) and (ap_const_logic_1 = RMdataOut_V_last_V_1_vld_in)))) then 
                    RMdataOut_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    RMdataOut_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = RMdataIn_V_data_V_0_load_A)) then
                RMdataIn_V_data_V_0_payload_A <= RMdataIn_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = RMdataIn_V_data_V_0_load_B)) then
                RMdataIn_V_data_V_0_payload_B <= RMdataIn_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = RMdataOut_V_data_V_1_load_A)) then
                RMdataOut_V_data_V_1_payload_A <= RMdataOut_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = RMdataOut_V_data_V_1_load_B)) then
                RMdataOut_V_data_V_1_payload_B <= RMdataOut_V_data_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = RMdataOut_V_last_V_1_load_A)) then
                RMdataOut_V_last_V_1_payload_A <= RMdataOut_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = RMdataOut_V_last_V_1_load_B)) then
                RMdataOut_V_last_V_1_payload_B <= RMdataOut_V_last_V_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_data_V_1_reg_81 <= RMdataIn_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_data_V_reg_76 <= RMdataIn_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_reg_86 <= tmp_fu_68_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_block_pp0_stage6_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    RMdataIn_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, RMdataIn_V_data_V_0_state, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1)))) then 
            RMdataIn_TDATA_blk_n <= RMdataIn_V_data_V_0_state(0);
        else 
            RMdataIn_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    RMdataIn_TREADY <= RMdataIn_V_last_V_0_state(1);
    RMdataIn_V_data_V_0_ack_in <= RMdataIn_V_data_V_0_state(1);

    RMdataIn_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            RMdataIn_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            RMdataIn_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    RMdataIn_V_data_V_0_data_out_assign_proc : process(RMdataIn_V_data_V_0_payload_A, RMdataIn_V_data_V_0_payload_B, RMdataIn_V_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = RMdataIn_V_data_V_0_sel)) then 
            RMdataIn_V_data_V_0_data_out <= RMdataIn_V_data_V_0_payload_B;
        else 
            RMdataIn_V_data_V_0_data_out <= RMdataIn_V_data_V_0_payload_A;
        end if; 
    end process;

    RMdataIn_V_data_V_0_load_A <= (not(RMdataIn_V_data_V_0_sel_wr) and RMdataIn_V_data_V_0_state_cmp_full);
    RMdataIn_V_data_V_0_load_B <= (RMdataIn_V_data_V_0_state_cmp_full and RMdataIn_V_data_V_0_sel_wr);
    RMdataIn_V_data_V_0_sel <= RMdataIn_V_data_V_0_sel_rd;
    RMdataIn_V_data_V_0_state_cmp_full <= '0' when (RMdataIn_V_data_V_0_state = ap_const_lv2_1) else '1';
    RMdataIn_V_data_V_0_vld_in <= RMdataIn_TVALID;
    RMdataIn_V_data_V_0_vld_out <= RMdataIn_V_data_V_0_state(0);

    RMdataIn_V_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            RMdataIn_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            RMdataIn_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    RMdataIn_V_last_V_0_vld_in <= RMdataIn_TVALID;
    RMdataOut_TDATA <= RMdataOut_V_data_V_1_data_out;

    RMdataOut_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage6, RMdataOut_V_data_V_1_state, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_block_pp0_stage6)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            RMdataOut_TDATA_blk_n <= RMdataOut_V_data_V_1_state(1);
        else 
            RMdataOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    RMdataOut_TLAST <= RMdataOut_V_last_V_1_data_out;
    RMdataOut_TVALID <= RMdataOut_V_last_V_1_state(0);
    RMdataOut_V_data_V_1_ack_in <= RMdataOut_V_data_V_1_state(1);
    RMdataOut_V_data_V_1_ack_out <= RMdataOut_TREADY;

    RMdataOut_V_data_V_1_data_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, RMdataIn_V_data_V_0_data_out, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, tmp_data_V_reg_76, tmp_data_V_1_reg_81, tmp_data_V_4_fu_72_p1, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001, ap_block_pp0_stage2_01001, ap_block_pp0_stage3_01001, ap_block_pp0_stage4_01001, ap_block_pp0_stage5_01001, ap_block_pp0_stage6_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            RMdataOut_V_data_V_1_data_in <= tmp_data_V_4_fu_72_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            RMdataOut_V_data_V_1_data_in <= tmp_data_V_1_reg_81;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            RMdataOut_V_data_V_1_data_in <= tmp_data_V_reg_76;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            RMdataOut_V_data_V_1_data_in <= RMdataIn_V_data_V_0_data_out;
        else 
            RMdataOut_V_data_V_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    RMdataOut_V_data_V_1_data_out_assign_proc : process(RMdataOut_V_data_V_1_payload_A, RMdataOut_V_data_V_1_payload_B, RMdataOut_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = RMdataOut_V_data_V_1_sel)) then 
            RMdataOut_V_data_V_1_data_out <= RMdataOut_V_data_V_1_payload_B;
        else 
            RMdataOut_V_data_V_1_data_out <= RMdataOut_V_data_V_1_payload_A;
        end if; 
    end process;

    RMdataOut_V_data_V_1_load_A <= (not(RMdataOut_V_data_V_1_sel_wr) and RMdataOut_V_data_V_1_state_cmp_full);
    RMdataOut_V_data_V_1_load_B <= (RMdataOut_V_data_V_1_state_cmp_full and RMdataOut_V_data_V_1_sel_wr);
    RMdataOut_V_data_V_1_sel <= RMdataOut_V_data_V_1_sel_rd;
    RMdataOut_V_data_V_1_state_cmp_full <= '0' when (RMdataOut_V_data_V_1_state = ap_const_lv2_1) else '1';

    RMdataOut_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            RMdataOut_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            RMdataOut_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    RMdataOut_V_data_V_1_vld_out <= RMdataOut_V_data_V_1_state(0);
    RMdataOut_V_last_V_1_ack_in <= RMdataOut_V_last_V_1_state(1);
    RMdataOut_V_last_V_1_ack_out <= RMdataOut_TREADY;

    RMdataOut_V_last_V_1_data_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0_01001, ap_block_pp0_stage1_01001, ap_block_pp0_stage2_01001, ap_block_pp0_stage3_01001, ap_block_pp0_stage4_01001, ap_block_pp0_stage5_01001, ap_block_pp0_stage6_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            RMdataOut_V_last_V_1_data_in <= ap_const_lv1_1;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            RMdataOut_V_last_V_1_data_in <= ap_const_lv1_0;
        else 
            RMdataOut_V_last_V_1_data_in <= "X";
        end if; 
    end process;


    RMdataOut_V_last_V_1_data_out_assign_proc : process(RMdataOut_V_last_V_1_payload_A, RMdataOut_V_last_V_1_payload_B, RMdataOut_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = RMdataOut_V_last_V_1_sel)) then 
            RMdataOut_V_last_V_1_data_out <= RMdataOut_V_last_V_1_payload_B;
        else 
            RMdataOut_V_last_V_1_data_out <= RMdataOut_V_last_V_1_payload_A;
        end if; 
    end process;

    RMdataOut_V_last_V_1_load_A <= (not(RMdataOut_V_last_V_1_sel_wr) and RMdataOut_V_last_V_1_state_cmp_full);
    RMdataOut_V_last_V_1_load_B <= (RMdataOut_V_last_V_1_state_cmp_full and RMdataOut_V_last_V_1_sel_wr);
    RMdataOut_V_last_V_1_sel <= RMdataOut_V_last_V_1_sel_rd;
    RMdataOut_V_last_V_1_state_cmp_full <= '0' when (RMdataOut_V_last_V_1_state = ap_const_lv2_1) else '1';

    RMdataOut_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            RMdataOut_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            RMdataOut_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    RMdataOut_V_last_V_1_vld_out <= RMdataOut_V_last_V_1_state(0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, RMdataOut_V_data_V_1_ack_in, RMdataIn_V_data_V_0_vld_out, RMdataOut_V_last_V_1_ack_in)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out) or (ap_start = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in) or (ap_const_logic_0 = RMdataOut_V_last_V_1_ack_in))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, RMdataOut_V_data_V_1_ack_in, RMdataIn_V_data_V_0_vld_out, RMdataOut_V_last_V_1_ack_in)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out) or (ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in) or (ap_start = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in) or (ap_const_logic_0 = RMdataOut_V_last_V_1_ack_in))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, RMdataOut_V_data_V_1_ack_in, RMdataIn_V_data_V_0_vld_out, RMdataOut_V_last_V_1_ack_in)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out) or (ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in) or (ap_start = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in) or (ap_const_logic_0 = RMdataOut_V_last_V_1_ack_in))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, RMdataIn_V_data_V_0_vld_out)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, RMdataOut_V_data_V_1_ack_in, RMdataIn_V_data_V_0_vld_out)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out) or (ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, RMdataOut_V_data_V_1_ack_in, RMdataIn_V_data_V_0_vld_out)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out) or (ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter0, RMdataIn_V_data_V_0_vld_out)
    begin
                ap_block_pp0_stage2_01001 <= ((ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, RMdataOut_V_data_V_1_ack_in, RMdataIn_V_data_V_0_vld_out)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out) or (ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, RMdataOut_V_data_V_1_ack_in, RMdataIn_V_data_V_0_vld_out)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out) or (ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(ap_enable_reg_pp0_iter0, RMdataIn_V_data_V_0_vld_out)
    begin
                ap_block_pp0_stage3_01001 <= ((ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, RMdataOut_V_data_V_1_ack_in, RMdataIn_V_data_V_0_vld_out)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out) or (ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, RMdataOut_V_data_V_1_ack_in, RMdataIn_V_data_V_0_vld_out)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out) or (ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in)));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, RMdataOut_V_data_V_1_ack_in)
    begin
                ap_block_pp0_stage4_11001 <= ((ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, RMdataOut_V_data_V_1_ack_in)
    begin
                ap_block_pp0_stage4_subdone <= ((ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter0, RMdataOut_V_data_V_1_ack_in)
    begin
                ap_block_pp0_stage5_11001 <= ((ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, RMdataOut_V_data_V_1_ack_in)
    begin
                ap_block_pp0_stage5_subdone <= ((ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter0, RMdataOut_V_data_V_1_ack_in)
    begin
                ap_block_pp0_stage6_11001 <= ((ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, RMdataOut_V_data_V_1_ack_in)
    begin
                ap_block_pp0_stage6_subdone <= ((ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, RMdataIn_V_data_V_0_vld_out)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(RMdataIn_V_data_V_0_vld_out)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out);
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(RMdataIn_V_data_V_0_vld_out)
    begin
                ap_block_state3_pp0_stage2_iter0 <= (ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out);
    end process;


    ap_block_state4_pp0_stage3_iter0_assign_proc : process(RMdataIn_V_data_V_0_vld_out)
    begin
                ap_block_state4_pp0_stage3_iter0 <= (ap_const_logic_0 = RMdataIn_V_data_V_0_vld_out);
    end process;

        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter1_assign_proc : process(RMdataOut_V_data_V_1_ack_in, RMdataOut_V_last_V_1_ack_in)
    begin
                ap_block_state8_pp0_stage0_iter1 <= ((ap_const_logic_0 = RMdataOut_V_data_V_1_ack_in) or (ap_const_logic_0 = RMdataOut_V_last_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    tmp_data_V_4_fu_72_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_86),128));
    tmp_fu_68_p1 <= RMdataIn_V_data_V_0_data_out(96 - 1 downto 0);
end behav;
