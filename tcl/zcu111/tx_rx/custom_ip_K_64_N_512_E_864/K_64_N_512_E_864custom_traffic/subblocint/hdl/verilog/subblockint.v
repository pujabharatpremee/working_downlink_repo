// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="subblockint,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu21dr-ffvd1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=5,HLS_SYN_TPT=4,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=870,HLS_SYN_LUT=246,HLS_VERSION=2018_3}" *)

module subblockint (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ITLVdataOut_TREADY,
        ITLVdataIn_TDATA,
        ITLVdataIn_TVALID,
        ITLVdataIn_TREADY,
        ITLVdataIn_TLAST,
        ITLVdataOut_TDATA,
        ITLVdataOut_TVALID,
        ITLVdataOut_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ITLVdataOut_TREADY;
input  [127:0] ITLVdataIn_TDATA;
input   ITLVdataIn_TVALID;
output   ITLVdataIn_TREADY;
input  [0:0] ITLVdataIn_TLAST;
output  [127:0] ITLVdataOut_TDATA;
output   ITLVdataOut_TVALID;
output  [0:0] ITLVdataOut_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ITLVdataIn_V_data_V_0_vld_out;
reg    ap_block_state4_pp0_stage3_iter0;
wire    ITLVdataOut_V_data_V_1_ack_in;
reg    ap_block_pp0_stage3_11001;
reg   [127:0] ITLVdataIn_V_data_V_0_data_out;
wire    ITLVdataIn_V_data_V_0_vld_in;
wire    ITLVdataIn_V_data_V_0_ack_in;
reg    ITLVdataIn_V_data_V_0_ack_out;
reg   [127:0] ITLVdataIn_V_data_V_0_payload_A;
reg   [127:0] ITLVdataIn_V_data_V_0_payload_B;
reg    ITLVdataIn_V_data_V_0_sel_rd;
reg    ITLVdataIn_V_data_V_0_sel_wr;
wire    ITLVdataIn_V_data_V_0_sel;
wire    ITLVdataIn_V_data_V_0_load_A;
wire    ITLVdataIn_V_data_V_0_load_B;
reg   [1:0] ITLVdataIn_V_data_V_0_state;
wire    ITLVdataIn_V_data_V_0_state_cmp_full;
wire    ITLVdataIn_V_last_V_0_vld_in;
reg    ITLVdataIn_V_last_V_0_ack_out;
reg   [1:0] ITLVdataIn_V_last_V_0_state;
reg   [127:0] ITLVdataOut_V_data_V_1_data_in;
reg   [127:0] ITLVdataOut_V_data_V_1_data_out;
reg    ITLVdataOut_V_data_V_1_vld_in;
wire    ITLVdataOut_V_data_V_1_vld_out;
wire    ITLVdataOut_V_data_V_1_ack_out;
reg   [127:0] ITLVdataOut_V_data_V_1_payload_A;
reg   [127:0] ITLVdataOut_V_data_V_1_payload_B;
reg    ITLVdataOut_V_data_V_1_sel_rd;
reg    ITLVdataOut_V_data_V_1_sel_wr;
wire    ITLVdataOut_V_data_V_1_sel;
wire    ITLVdataOut_V_data_V_1_load_A;
wire    ITLVdataOut_V_data_V_1_load_B;
reg   [1:0] ITLVdataOut_V_data_V_1_state;
wire    ITLVdataOut_V_data_V_1_state_cmp_full;
reg   [0:0] ITLVdataOut_V_last_V_1_data_in;
reg   [0:0] ITLVdataOut_V_last_V_1_data_out;
reg    ITLVdataOut_V_last_V_1_vld_in;
wire    ITLVdataOut_V_last_V_1_vld_out;
wire    ITLVdataOut_V_last_V_1_ack_in;
wire    ITLVdataOut_V_last_V_1_ack_out;
reg   [0:0] ITLVdataOut_V_last_V_1_payload_A;
reg   [0:0] ITLVdataOut_V_last_V_1_payload_B;
reg    ITLVdataOut_V_last_V_1_sel_rd;
reg    ITLVdataOut_V_last_V_1_sel_wr;
wire    ITLVdataOut_V_last_V_1_sel;
wire    ITLVdataOut_V_last_V_1_load_A;
wire    ITLVdataOut_V_last_V_1_load_B;
reg   [1:0] ITLVdataOut_V_last_V_1_state;
wire    ITLVdataOut_V_last_V_1_state_cmp_full;
reg    ITLVdataIn_TDATA_blk_n;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
reg    ITLVdataOut_TDATA_blk_n;
reg   [47:0] reg_178;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [15:0] grp_fu_108_p4;
reg   [15:0] reg_182;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [15:0] reg_186;
wire   [47:0] tmp_3_fu_190_p1;
reg   [47:0] tmp_3_reg_262;
wire   [127:0] tmp_data_V_2_fu_194_p5;
wire   [15:0] grp_fu_128_p4;
reg   [15:0] tmp_7_reg_272;
wire   [15:0] grp_fu_138_p4;
reg   [15:0] tmp_9_reg_277;
wire   [15:0] tmp_11_fu_206_p1;
reg   [15:0] tmp_11_reg_282;
reg   [15:0] tmp_12_reg_287;
reg   [15:0] tmp_14_reg_292;
reg   [15:0] tmp_16_reg_297;
wire   [127:0] tmp_data_V_3_fu_214_p9;
reg    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg   [15:0] tmp_s_reg_307;
reg   [15:0] tmp_13_reg_312;
reg   [15:0] tmp_15_reg_317;
reg   [15:0] tmp_17_reg_322;
wire   [127:0] tmp_data_V_4_fu_232_p9;
wire   [47:0] tmp_22_fu_246_p1;
reg   [47:0] tmp_22_reg_332;
wire   [127:0] tmp_data_V_5_fu_250_p5;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage1_01001;
reg    ap_block_pp0_stage2_01001;
reg    ap_block_pp0_stage3_01001;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] tmp_10_fu_210_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ITLVdataIn_V_data_V_0_sel_rd = 1'b0;
#0 ITLVdataIn_V_data_V_0_sel_wr = 1'b0;
#0 ITLVdataIn_V_data_V_0_state = 2'd0;
#0 ITLVdataIn_V_last_V_0_state = 2'd0;
#0 ITLVdataOut_V_data_V_1_sel_rd = 1'b0;
#0 ITLVdataOut_V_data_V_1_sel_wr = 1'b0;
#0 ITLVdataOut_V_data_V_1_state = 2'd0;
#0 ITLVdataOut_V_last_V_1_sel_rd = 1'b0;
#0 ITLVdataOut_V_last_V_1_sel_wr = 1'b0;
#0 ITLVdataOut_V_last_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ITLVdataIn_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == ITLVdataIn_V_data_V_0_ack_out) & (1'b1 == ITLVdataIn_V_data_V_0_vld_out))) begin
            ITLVdataIn_V_data_V_0_sel_rd <= ~ITLVdataIn_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ITLVdataIn_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == ITLVdataIn_V_data_V_0_ack_in) & (1'b1 == ITLVdataIn_V_data_V_0_vld_in))) begin
            ITLVdataIn_V_data_V_0_sel_wr <= ~ITLVdataIn_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ITLVdataIn_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == ITLVdataIn_V_data_V_0_state) & (1'b0 == ITLVdataIn_V_data_V_0_vld_in)) | ((2'd3 == ITLVdataIn_V_data_V_0_state) & (1'b0 == ITLVdataIn_V_data_V_0_vld_in) & (1'b1 == ITLVdataIn_V_data_V_0_ack_out)))) begin
            ITLVdataIn_V_data_V_0_state <= 2'd2;
        end else if ((((2'd1 == ITLVdataIn_V_data_V_0_state) & (1'b0 == ITLVdataIn_V_data_V_0_ack_out)) | ((2'd3 == ITLVdataIn_V_data_V_0_state) & (1'b0 == ITLVdataIn_V_data_V_0_ack_out) & (1'b1 == ITLVdataIn_V_data_V_0_vld_in)))) begin
            ITLVdataIn_V_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == ITLVdataIn_V_data_V_0_vld_in) & (1'b1 == ITLVdataIn_V_data_V_0_ack_out)) & ~((1'b0 == ITLVdataIn_V_data_V_0_ack_out) & (1'b1 == ITLVdataIn_V_data_V_0_vld_in)) & (2'd3 == ITLVdataIn_V_data_V_0_state)) | ((2'd1 == ITLVdataIn_V_data_V_0_state) & (1'b1 == ITLVdataIn_V_data_V_0_ack_out)) | ((2'd2 == ITLVdataIn_V_data_V_0_state) & (1'b1 == ITLVdataIn_V_data_V_0_vld_in)))) begin
            ITLVdataIn_V_data_V_0_state <= 2'd3;
        end else begin
            ITLVdataIn_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ITLVdataIn_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == ITLVdataIn_V_last_V_0_state) & (1'b0 == ITLVdataIn_V_last_V_0_vld_in)) | ((2'd3 == ITLVdataIn_V_last_V_0_state) & (1'b0 == ITLVdataIn_V_last_V_0_vld_in) & (1'b1 == ITLVdataIn_V_last_V_0_ack_out)))) begin
            ITLVdataIn_V_last_V_0_state <= 2'd2;
        end else if ((((2'd1 == ITLVdataIn_V_last_V_0_state) & (1'b0 == ITLVdataIn_V_last_V_0_ack_out)) | ((2'd3 == ITLVdataIn_V_last_V_0_state) & (1'b0 == ITLVdataIn_V_last_V_0_ack_out) & (1'b1 == ITLVdataIn_V_last_V_0_vld_in)))) begin
            ITLVdataIn_V_last_V_0_state <= 2'd1;
        end else if (((~((1'b0 == ITLVdataIn_V_last_V_0_vld_in) & (1'b1 == ITLVdataIn_V_last_V_0_ack_out)) & ~((1'b0 == ITLVdataIn_V_last_V_0_ack_out) & (1'b1 == ITLVdataIn_V_last_V_0_vld_in)) & (2'd3 == ITLVdataIn_V_last_V_0_state)) | ((2'd1 == ITLVdataIn_V_last_V_0_state) & (1'b1 == ITLVdataIn_V_last_V_0_ack_out)) | ((2'd2 == ITLVdataIn_V_last_V_0_state) & (1'b1 == ITLVdataIn_V_last_V_0_vld_in)))) begin
            ITLVdataIn_V_last_V_0_state <= 2'd3;
        end else begin
            ITLVdataIn_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ITLVdataOut_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == ITLVdataOut_V_data_V_1_ack_out) & (1'b1 == ITLVdataOut_V_data_V_1_vld_out))) begin
            ITLVdataOut_V_data_V_1_sel_rd <= ~ITLVdataOut_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ITLVdataOut_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == ITLVdataOut_V_data_V_1_ack_in) & (1'b1 == ITLVdataOut_V_data_V_1_vld_in))) begin
            ITLVdataOut_V_data_V_1_sel_wr <= ~ITLVdataOut_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ITLVdataOut_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == ITLVdataOut_V_data_V_1_state) & (1'b0 == ITLVdataOut_V_data_V_1_vld_in)) | ((2'd3 == ITLVdataOut_V_data_V_1_state) & (1'b0 == ITLVdataOut_V_data_V_1_vld_in) & (1'b1 == ITLVdataOut_V_data_V_1_ack_out)))) begin
            ITLVdataOut_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == ITLVdataOut_V_data_V_1_state) & (1'b0 == ITLVdataOut_V_data_V_1_ack_out)) | ((2'd3 == ITLVdataOut_V_data_V_1_state) & (1'b0 == ITLVdataOut_V_data_V_1_ack_out) & (1'b1 == ITLVdataOut_V_data_V_1_vld_in)))) begin
            ITLVdataOut_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == ITLVdataOut_V_data_V_1_vld_in) & (1'b1 == ITLVdataOut_V_data_V_1_ack_out)) & ~((1'b0 == ITLVdataOut_V_data_V_1_ack_out) & (1'b1 == ITLVdataOut_V_data_V_1_vld_in)) & (2'd3 == ITLVdataOut_V_data_V_1_state)) | ((2'd1 == ITLVdataOut_V_data_V_1_state) & (1'b1 == ITLVdataOut_V_data_V_1_ack_out)) | ((2'd2 == ITLVdataOut_V_data_V_1_state) & (1'b1 == ITLVdataOut_V_data_V_1_vld_in)))) begin
            ITLVdataOut_V_data_V_1_state <= 2'd3;
        end else begin
            ITLVdataOut_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ITLVdataOut_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == ITLVdataOut_V_last_V_1_ack_out) & (1'b1 == ITLVdataOut_V_last_V_1_vld_out))) begin
            ITLVdataOut_V_last_V_1_sel_rd <= ~ITLVdataOut_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ITLVdataOut_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == ITLVdataOut_V_last_V_1_ack_in) & (1'b1 == ITLVdataOut_V_last_V_1_vld_in))) begin
            ITLVdataOut_V_last_V_1_sel_wr <= ~ITLVdataOut_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ITLVdataOut_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == ITLVdataOut_V_last_V_1_state) & (1'b0 == ITLVdataOut_V_last_V_1_vld_in)) | ((2'd3 == ITLVdataOut_V_last_V_1_state) & (1'b0 == ITLVdataOut_V_last_V_1_vld_in) & (1'b1 == ITLVdataOut_V_last_V_1_ack_out)))) begin
            ITLVdataOut_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == ITLVdataOut_V_last_V_1_state) & (1'b0 == ITLVdataOut_V_last_V_1_ack_out)) | ((2'd3 == ITLVdataOut_V_last_V_1_state) & (1'b0 == ITLVdataOut_V_last_V_1_ack_out) & (1'b1 == ITLVdataOut_V_last_V_1_vld_in)))) begin
            ITLVdataOut_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == ITLVdataOut_V_last_V_1_vld_in) & (1'b1 == ITLVdataOut_V_last_V_1_ack_out)) & ~((1'b0 == ITLVdataOut_V_last_V_1_ack_out) & (1'b1 == ITLVdataOut_V_last_V_1_vld_in)) & (2'd3 == ITLVdataOut_V_last_V_1_state)) | ((2'd1 == ITLVdataOut_V_last_V_1_state) & (1'b1 == ITLVdataOut_V_last_V_1_ack_out)) | ((2'd2 == ITLVdataOut_V_last_V_1_state) & (1'b1 == ITLVdataOut_V_last_V_1_vld_in)))) begin
            ITLVdataOut_V_last_V_1_state <= 2'd3;
        end else begin
            ITLVdataOut_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ITLVdataIn_V_data_V_0_load_A)) begin
        ITLVdataIn_V_data_V_0_payload_A <= ITLVdataIn_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ITLVdataIn_V_data_V_0_load_B)) begin
        ITLVdataIn_V_data_V_0_payload_B <= ITLVdataIn_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ITLVdataOut_V_data_V_1_load_A)) begin
        ITLVdataOut_V_data_V_1_payload_A <= ITLVdataOut_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ITLVdataOut_V_data_V_1_load_B)) begin
        ITLVdataOut_V_data_V_1_payload_B <= ITLVdataOut_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ITLVdataOut_V_last_V_1_load_A)) begin
        ITLVdataOut_V_last_V_1_payload_A <= ITLVdataOut_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ITLVdataOut_V_last_V_1_load_B)) begin
        ITLVdataOut_V_last_V_1_payload_B <= ITLVdataOut_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_178 <= {{ITLVdataIn_V_data_V_0_data_out[127:80]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_182 <= {{ITLVdataIn_V_data_V_0_data_out[63:48]}};
        reg_186 <= {{ITLVdataIn_V_data_V_0_data_out[79:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_11_reg_282 <= tmp_11_fu_206_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_12_reg_287 <= {{ITLVdataIn_V_data_V_0_data_out[127:112]}};
        tmp_14_reg_292 <= {{ITLVdataIn_V_data_V_0_data_out[111:96]}};
        tmp_16_reg_297 <= {{ITLVdataIn_V_data_V_0_data_out[95:80]}};
        tmp_7_reg_272 <= {{ITLVdataIn_V_data_V_0_data_out[47:32]}};
        tmp_9_reg_277 <= {{ITLVdataIn_V_data_V_0_data_out[31:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_13_reg_312 <= {{ITLVdataIn_V_data_V_0_data_out[111:96]}};
        tmp_15_reg_317 <= {{ITLVdataIn_V_data_V_0_data_out[95:80]}};
        tmp_17_reg_322 <= {{ITLVdataIn_V_data_V_0_data_out[79:64]}};
        tmp_s_reg_307 <= {{ITLVdataIn_V_data_V_0_data_out[127:112]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        tmp_22_reg_332 <= tmp_22_fu_246_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_3_reg_262 <= tmp_3_fu_190_p1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1)))) begin
        ITLVdataIn_TDATA_blk_n = ITLVdataIn_V_data_V_0_state[1'd0];
    end else begin
        ITLVdataIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ITLVdataIn_V_data_V_0_ack_out = 1'b1;
    end else begin
        ITLVdataIn_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ITLVdataIn_V_data_V_0_sel)) begin
        ITLVdataIn_V_data_V_0_data_out = ITLVdataIn_V_data_V_0_payload_B;
    end else begin
        ITLVdataIn_V_data_V_0_data_out = ITLVdataIn_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ITLVdataIn_V_last_V_0_ack_out = 1'b1;
    end else begin
        ITLVdataIn_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ITLVdataOut_TDATA_blk_n = ITLVdataOut_V_data_V_1_state[1'd1];
    end else begin
        ITLVdataOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ITLVdataOut_V_data_V_1_data_in = tmp_data_V_5_fu_250_p5;
    end else if (((1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ITLVdataOut_V_data_V_1_data_in = tmp_data_V_4_fu_232_p9;
    end else if (((1'b0 == ap_block_pp0_stage2_01001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ITLVdataOut_V_data_V_1_data_in = tmp_data_V_3_fu_214_p9;
    end else if (((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ITLVdataOut_V_data_V_1_data_in = tmp_data_V_2_fu_194_p5;
    end else begin
        ITLVdataOut_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ITLVdataOut_V_data_V_1_sel)) begin
        ITLVdataOut_V_data_V_1_data_out = ITLVdataOut_V_data_V_1_payload_B;
    end else begin
        ITLVdataOut_V_data_V_1_data_out = ITLVdataOut_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ITLVdataOut_V_data_V_1_vld_in = 1'b1;
    end else begin
        ITLVdataOut_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ITLVdataOut_V_last_V_1_data_in = 1'd1;
    end else if ((((1'b0 == ap_block_pp0_stage2_01001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_01001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_01001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        ITLVdataOut_V_last_V_1_data_in = 1'd0;
    end else begin
        ITLVdataOut_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ITLVdataOut_V_last_V_1_sel)) begin
        ITLVdataOut_V_last_V_1_data_out = ITLVdataOut_V_last_V_1_payload_B;
    end else begin
        ITLVdataOut_V_last_V_1_data_out = ITLVdataOut_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ITLVdataOut_V_last_V_1_vld_in = 1'b1;
    end else begin
        ITLVdataOut_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ITLVdataIn_TREADY = ITLVdataIn_V_last_V_0_state[1'd1];

assign ITLVdataIn_V_data_V_0_ack_in = ITLVdataIn_V_data_V_0_state[1'd1];

assign ITLVdataIn_V_data_V_0_load_A = (~ITLVdataIn_V_data_V_0_sel_wr & ITLVdataIn_V_data_V_0_state_cmp_full);

assign ITLVdataIn_V_data_V_0_load_B = (ITLVdataIn_V_data_V_0_state_cmp_full & ITLVdataIn_V_data_V_0_sel_wr);

assign ITLVdataIn_V_data_V_0_sel = ITLVdataIn_V_data_V_0_sel_rd;

assign ITLVdataIn_V_data_V_0_state_cmp_full = ((ITLVdataIn_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign ITLVdataIn_V_data_V_0_vld_in = ITLVdataIn_TVALID;

assign ITLVdataIn_V_data_V_0_vld_out = ITLVdataIn_V_data_V_0_state[1'd0];

assign ITLVdataIn_V_last_V_0_vld_in = ITLVdataIn_TVALID;

assign ITLVdataOut_TDATA = ITLVdataOut_V_data_V_1_data_out;

assign ITLVdataOut_TLAST = ITLVdataOut_V_last_V_1_data_out;

assign ITLVdataOut_TVALID = ITLVdataOut_V_last_V_1_state[1'd0];

assign ITLVdataOut_V_data_V_1_ack_in = ITLVdataOut_V_data_V_1_state[1'd1];

assign ITLVdataOut_V_data_V_1_ack_out = ITLVdataOut_TREADY;

assign ITLVdataOut_V_data_V_1_load_A = (~ITLVdataOut_V_data_V_1_sel_wr & ITLVdataOut_V_data_V_1_state_cmp_full);

assign ITLVdataOut_V_data_V_1_load_B = (ITLVdataOut_V_data_V_1_state_cmp_full & ITLVdataOut_V_data_V_1_sel_wr);

assign ITLVdataOut_V_data_V_1_sel = ITLVdataOut_V_data_V_1_sel_rd;

assign ITLVdataOut_V_data_V_1_state_cmp_full = ((ITLVdataOut_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign ITLVdataOut_V_data_V_1_vld_out = ITLVdataOut_V_data_V_1_state[1'd0];

assign ITLVdataOut_V_last_V_1_ack_in = ITLVdataOut_V_last_V_1_state[1'd1];

assign ITLVdataOut_V_last_V_1_ack_out = ITLVdataOut_TREADY;

assign ITLVdataOut_V_last_V_1_load_A = (~ITLVdataOut_V_last_V_1_sel_wr & ITLVdataOut_V_last_V_1_state_cmp_full);

assign ITLVdataOut_V_last_V_1_load_B = (ITLVdataOut_V_last_V_1_state_cmp_full & ITLVdataOut_V_last_V_1_sel_wr);

assign ITLVdataOut_V_last_V_1_sel = ITLVdataOut_V_last_V_1_sel_rd;

assign ITLVdataOut_V_last_V_1_state_cmp_full = ((ITLVdataOut_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign ITLVdataOut_V_last_V_1_vld_out = ITLVdataOut_V_last_V_1_state[1'd0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == ITLVdataIn_V_data_V_0_vld_out) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b0 == ITLVdataOut_V_data_V_1_ack_in) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == ITLVdataIn_V_data_V_0_vld_out) | (ap_start == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b0 == ITLVdataOut_V_data_V_1_ack_in) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == ITLVdataIn_V_data_V_0_vld_out) | (ap_start == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((1'b0 == ITLVdataIn_V_data_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == ITLVdataOut_V_data_V_1_ack_in) | (1'b0 == ITLVdataOut_V_last_V_1_ack_in))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == ITLVdataOut_V_data_V_1_ack_in) | (1'b0 == ITLVdataIn_V_data_V_0_vld_out))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == ITLVdataOut_V_data_V_1_ack_in) | (1'b0 == ITLVdataOut_V_last_V_1_ack_in))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == ITLVdataOut_V_data_V_1_ack_in) | (1'b0 == ITLVdataIn_V_data_V_0_vld_out))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b0 == ITLVdataOut_V_data_V_1_ack_in) | (1'b0 == ITLVdataOut_V_last_V_1_ack_in))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((1'b0 == ITLVdataIn_V_data_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == ITLVdataOut_V_data_V_1_ack_in) | (1'b0 == ITLVdataIn_V_data_V_0_vld_out)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == ITLVdataOut_V_data_V_1_ack_in) | (1'b0 == ITLVdataIn_V_data_V_0_vld_out)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((1'b0 == ITLVdataIn_V_data_V_0_vld_out) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == ITLVdataOut_V_data_V_1_ack_in) | (1'b0 == ITLVdataIn_V_data_V_0_vld_out)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b0 == ITLVdataOut_V_data_V_1_ack_in) | (1'b0 == ITLVdataIn_V_data_V_0_vld_out)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((1'b0 == ITLVdataIn_V_data_V_0_vld_out) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (1'b0 == ITLVdataIn_V_data_V_0_vld_out);
end

always @ (*) begin
    ap_block_state3_pp0_stage2_iter0 = (1'b0 == ITLVdataIn_V_data_V_0_vld_out);
end

always @ (*) begin
    ap_block_state4_pp0_stage3_iter0 = (1'b0 == ITLVdataIn_V_data_V_0_vld_out);
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage1_iter1 = ((1'b0 == ITLVdataOut_V_data_V_1_ack_in) | (1'b0 == ITLVdataOut_V_last_V_1_ack_in));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_108_p4 = {{ITLVdataIn_V_data_V_0_data_out[63:48]}};

assign grp_fu_128_p4 = {{ITLVdataIn_V_data_V_0_data_out[47:32]}};

assign grp_fu_138_p4 = {{ITLVdataIn_V_data_V_0_data_out[31:16]}};

assign tmp_10_fu_210_p1 = ITLVdataIn_V_data_V_0_data_out[15:0];

assign tmp_11_fu_206_p1 = ITLVdataIn_V_data_V_0_data_out[15:0];

assign tmp_22_fu_246_p1 = ITLVdataIn_V_data_V_0_data_out[47:0];

assign tmp_3_fu_190_p1 = ITLVdataIn_V_data_V_0_data_out[47:0];

assign tmp_data_V_2_fu_194_p5 = {{{{reg_178}, {reg_182}}, {reg_186}}, {tmp_3_reg_262}};

assign tmp_data_V_3_fu_214_p9 = {{{{{{{{grp_fu_108_p4}, {reg_182}}, {grp_fu_128_p4}}, {tmp_7_reg_272}}, {grp_fu_138_p4}}, {tmp_9_reg_277}}, {tmp_10_fu_210_p1}}, {tmp_11_reg_282}};

assign tmp_data_V_4_fu_232_p9 = {{{{{{{{tmp_s_reg_307}, {tmp_12_reg_287}}, {tmp_13_reg_312}}, {tmp_14_reg_292}}, {tmp_15_reg_317}}, {tmp_16_reg_297}}, {tmp_17_reg_322}}, {reg_186}};

assign tmp_data_V_5_fu_250_p5 = {{{{reg_178}, {reg_182}}, {reg_186}}, {tmp_22_reg_332}};

endmodule //subblockint
